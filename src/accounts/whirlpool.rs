//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use crate::types::WhirlpoolRewardInfo;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// External types

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Whirlpool {
pub discriminator: [u8; 8],
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub whirlpools_config: Pubkey,
pub whirlpool_bump: [u8; 1],
pub tick_spacing: u16,
pub tick_spacing_seed: [u8; 2],
pub fee_rate: u16,
pub protocol_fee_rate: u16,
pub liquidity: u128,
pub sqrt_price: u128,
pub tick_current_index: i32,
pub protocol_fee_owed_a: u64,
pub protocol_fee_owed_b: u64,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_mint_a: Pubkey,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_vault_a: Pubkey,
pub fee_growth_global_a: u128,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_mint_b: Pubkey,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_vault_b: Pubkey,
pub fee_growth_global_b: u128,
pub reward_last_updated_timestamp: u64,
pub reward_infos: [WhirlpoolRewardInfo; 3],
}


impl Whirlpool {
      pub const LEN: usize = 653;
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Whirlpool {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "fetch")]
pub fn fetch_whirlpool(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &Pubkey,
) -> Result<super::DecodedAccount<Whirlpool>, Error> {
  let accounts = fetch_all_whirlpool(rpc, vec![address])?;
  Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_whirlpool(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: Vec<Pubkey>,
) -> Result<Vec<super::DecodedAccount<Whirlpool>>, Error> {
    let accounts = rpc.get_multiple_accounts(&addresses)?;
    let mut decoded_accounts: Vec<super::DecodedAccount<Whirlpool>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      let account = accounts[i].as_ref().ok_or(format!("Account not found: {}", address))?;
      let data = Whirlpool::from_bytes(&account.data)?;
      decoded_accounts.push(super::DecodedAccount { address, account: account.clone(), data });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_whirlpool(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &Pubkey,
) -> Result<super::MaybeAccount<Whirlpool>, Error> {
    let accounts = fetch_all_maybe_whirlpool(rpc, vec![address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_whirlpool(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: Vec<Pubkey>,
) -> Result<Vec<super::MaybeAccount<Whirlpool>>, Error> {
    let accounts = rpc.get_multiple_accounts(&addresses)?;
    let mut decoded_accounts: Vec<super::MaybeAccount<Whirlpool>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      if let Some(account) = accounts[i].as_ref() {
        let data = Whirlpool::from_bytes(&account.data)?;
        decoded_accounts.push(super::MaybeAccount::Exists(super::DecodedAccount { address, account: account.clone(), data }));
      } else {
        decoded_accounts.push(super::MaybeAccount::NotFound(address));
      }
    }
  Ok(decoded_accounts)
}

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountDeserialize for Whirlpool {
      fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
      }
  }

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountSerialize for Whirlpool {}

  #[cfg(feature = "anchor")]
  impl anchor_lang::Owner for Whirlpool {
      fn owner() -> Pubkey {
        crate::YVAULTS_ID
      }
  }

  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::IdlBuild for Whirlpool {}

  
  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::Discriminator for Whirlpool {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
  }

