//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
pub struct Deposit {
      
              
          pub user: solana_program::pubkey::Pubkey,
          
              
          pub strategy: solana_program::pubkey::Pubkey,
          
              
          pub global_config: solana_program::pubkey::Pubkey,
          
              
          pub pool: solana_program::pubkey::Pubkey,
          
              
          pub position: solana_program::pubkey::Pubkey,
          
              
          pub tick_array_lower: solana_program::pubkey::Pubkey,
          
              
          pub tick_array_upper: solana_program::pubkey::Pubkey,
          
              
          pub token_a_vault: solana_program::pubkey::Pubkey,
          
              
          pub token_b_vault: solana_program::pubkey::Pubkey,
          
              
          pub base_vault_authority: solana_program::pubkey::Pubkey,
          
              
          pub token_a_ata: solana_program::pubkey::Pubkey,
          
              
          pub token_b_ata: solana_program::pubkey::Pubkey,
          
              
          pub token_a_mint: solana_program::pubkey::Pubkey,
          
              
          pub token_b_mint: solana_program::pubkey::Pubkey,
          
              
          pub user_shares_ata: solana_program::pubkey::Pubkey,
          
              
          pub shares_mint: solana_program::pubkey::Pubkey,
          
              
          pub shares_mint_authority: solana_program::pubkey::Pubkey,
          
              
          pub scope_prices: solana_program::pubkey::Pubkey,
          
              
          pub token_infos: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub token_a_token_program: solana_program::pubkey::Pubkey,
          
              
          pub token_b_token_program: solana_program::pubkey::Pubkey,
          
              
          pub instruction_sysvar_account: solana_program::pubkey::Pubkey,
      }

impl Deposit {
  pub fn instruction(&self, args: DepositInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DepositInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(23+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.user,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tick_array_lower,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tick_array_upper,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_vault_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_shares_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.shares_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.shares_mint_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.scope_prices,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_infos,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = DepositInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::YVAULTS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositInstructionData {
            discriminator: [u8; 8],
                  }

impl DepositInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [242, 35, 198, 137, 82, 225, 242, 182],
                                              }
  }
}

impl Default for DepositInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositInstructionArgs {
                  pub token_max_a: u64,
                pub token_max_b: u64,
      }


/// Instruction builder for `Deposit`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` strategy
          ///   2. `[]` global_config
          ///   3. `[]` pool
          ///   4. `[]` position
          ///   5. `[]` tick_array_lower
          ///   6. `[]` tick_array_upper
                ///   7. `[writable]` token_a_vault
                ///   8. `[writable]` token_b_vault
          ///   9. `[]` base_vault_authority
                ///   10. `[writable]` token_a_ata
                ///   11. `[writable]` token_b_ata
          ///   12. `[]` token_a_mint
          ///   13. `[]` token_b_mint
                ///   14. `[writable]` user_shares_ata
                ///   15. `[writable]` shares_mint
          ///   16. `[]` shares_mint_authority
          ///   17. `[]` scope_prices
          ///   18. `[]` token_infos
                ///   19. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   20. `[]` token_a_token_program
          ///   21. `[]` token_b_token_program
                ///   22. `[optional]` instruction_sysvar_account (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct DepositBuilder {
            user: Option<solana_program::pubkey::Pubkey>,
                strategy: Option<solana_program::pubkey::Pubkey>,
                global_config: Option<solana_program::pubkey::Pubkey>,
                pool: Option<solana_program::pubkey::Pubkey>,
                position: Option<solana_program::pubkey::Pubkey>,
                tick_array_lower: Option<solana_program::pubkey::Pubkey>,
                tick_array_upper: Option<solana_program::pubkey::Pubkey>,
                token_a_vault: Option<solana_program::pubkey::Pubkey>,
                token_b_vault: Option<solana_program::pubkey::Pubkey>,
                base_vault_authority: Option<solana_program::pubkey::Pubkey>,
                token_a_ata: Option<solana_program::pubkey::Pubkey>,
                token_b_ata: Option<solana_program::pubkey::Pubkey>,
                token_a_mint: Option<solana_program::pubkey::Pubkey>,
                token_b_mint: Option<solana_program::pubkey::Pubkey>,
                user_shares_ata: Option<solana_program::pubkey::Pubkey>,
                shares_mint: Option<solana_program::pubkey::Pubkey>,
                shares_mint_authority: Option<solana_program::pubkey::Pubkey>,
                scope_prices: Option<solana_program::pubkey::Pubkey>,
                token_infos: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                token_a_token_program: Option<solana_program::pubkey::Pubkey>,
                token_b_token_program: Option<solana_program::pubkey::Pubkey>,
                instruction_sysvar_account: Option<solana_program::pubkey::Pubkey>,
                        token_max_a: Option<u64>,
                token_max_b: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user = Some(user);
                    self
    }
            #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.strategy = Some(strategy);
                    self
    }
            #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.global_config = Some(global_config);
                    self
    }
            #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pool = Some(pool);
                    self
    }
            #[inline(always)]
    pub fn position(&mut self, position: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position = Some(position);
                    self
    }
            #[inline(always)]
    pub fn tick_array_lower(&mut self, tick_array_lower: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tick_array_lower = Some(tick_array_lower);
                    self
    }
            #[inline(always)]
    pub fn tick_array_upper(&mut self, tick_array_upper: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tick_array_upper = Some(tick_array_upper);
                    self
    }
            #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_a_vault = Some(token_a_vault);
                    self
    }
            #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_b_vault = Some(token_b_vault);
                    self
    }
            #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_vault_authority = Some(base_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn token_a_ata(&mut self, token_a_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_a_ata = Some(token_a_ata);
                    self
    }
            #[inline(always)]
    pub fn token_b_ata(&mut self, token_b_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_b_ata = Some(token_b_ata);
                    self
    }
            #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_a_mint = Some(token_a_mint);
                    self
    }
            #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_b_mint = Some(token_b_mint);
                    self
    }
            #[inline(always)]
    pub fn user_shares_ata(&mut self, user_shares_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_shares_ata = Some(user_shares_ata);
                    self
    }
            #[inline(always)]
    pub fn shares_mint(&mut self, shares_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.shares_mint = Some(shares_mint);
                    self
    }
            #[inline(always)]
    pub fn shares_mint_authority(&mut self, shares_mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.shares_mint_authority = Some(shares_mint_authority);
                    self
    }
            #[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.scope_prices = Some(scope_prices);
                    self
    }
            #[inline(always)]
    pub fn token_infos(&mut self, token_infos: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_infos = Some(token_infos);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn token_a_token_program(&mut self, token_a_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_a_token_program = Some(token_a_token_program);
                    self
    }
            #[inline(always)]
    pub fn token_b_token_program(&mut self, token_b_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_b_token_program = Some(token_b_token_program);
                    self
    }
            /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
#[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn token_max_a(&mut self, token_max_a: u64) -> &mut Self {
        self.token_max_a = Some(token_max_a);
        self
      }
                #[inline(always)]
      pub fn token_max_b(&mut self, token_max_b: u64) -> &mut Self {
        self.token_max_b = Some(token_max_b);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Deposit {
                              user: self.user.expect("user is not set"),
                                        strategy: self.strategy.expect("strategy is not set"),
                                        global_config: self.global_config.expect("global_config is not set"),
                                        pool: self.pool.expect("pool is not set"),
                                        position: self.position.expect("position is not set"),
                                        tick_array_lower: self.tick_array_lower.expect("tick_array_lower is not set"),
                                        tick_array_upper: self.tick_array_upper.expect("tick_array_upper is not set"),
                                        token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
                                        token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
                                        base_vault_authority: self.base_vault_authority.expect("base_vault_authority is not set"),
                                        token_a_ata: self.token_a_ata.expect("token_a_ata is not set"),
                                        token_b_ata: self.token_b_ata.expect("token_b_ata is not set"),
                                        token_a_mint: self.token_a_mint.expect("token_a_mint is not set"),
                                        token_b_mint: self.token_b_mint.expect("token_b_mint is not set"),
                                        user_shares_ata: self.user_shares_ata.expect("user_shares_ata is not set"),
                                        shares_mint: self.shares_mint.expect("shares_mint is not set"),
                                        shares_mint_authority: self.shares_mint_authority.expect("shares_mint_authority is not set"),
                                        scope_prices: self.scope_prices.expect("scope_prices is not set"),
                                        token_infos: self.token_infos.expect("token_infos is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        token_a_token_program: self.token_a_token_program.expect("token_a_token_program is not set"),
                                        token_b_token_program: self.token_b_token_program.expect("token_b_token_program is not set"),
                                        instruction_sysvar_account: self.instruction_sysvar_account.unwrap_or(solana_program::pubkey!("Sysvar1nstructions1111111111111111111111111")),
                      };
          let args = DepositInstructionArgs {
                                                              token_max_a: self.token_max_a.clone().expect("token_max_a is not set"),
                                                                  token_max_b: self.token_max_b.clone().expect("token_max_b is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `deposit` CPI accounts.
  pub struct DepositCpiAccounts<'a, 'b> {
          
                    
              pub user: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub position: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_shares_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub shares_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub shares_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `deposit` CPI instruction.
pub struct DepositCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub user: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub position: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_shares_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub shares_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub shares_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DepositInstructionArgs,
  }

impl<'a, 'b> DepositCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: DepositCpiAccounts<'a, 'b>,
              args: DepositInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              user: accounts.user,
              strategy: accounts.strategy,
              global_config: accounts.global_config,
              pool: accounts.pool,
              position: accounts.position,
              tick_array_lower: accounts.tick_array_lower,
              tick_array_upper: accounts.tick_array_upper,
              token_a_vault: accounts.token_a_vault,
              token_b_vault: accounts.token_b_vault,
              base_vault_authority: accounts.base_vault_authority,
              token_a_ata: accounts.token_a_ata,
              token_b_ata: accounts.token_b_ata,
              token_a_mint: accounts.token_a_mint,
              token_b_mint: accounts.token_b_mint,
              user_shares_ata: accounts.user_shares_ata,
              shares_mint: accounts.shares_mint,
              shares_mint_authority: accounts.shares_mint_authority,
              scope_prices: accounts.scope_prices,
              token_infos: accounts.token_infos,
              token_program: accounts.token_program,
              token_a_token_program: accounts.token_a_token_program,
              token_b_token_program: accounts.token_b_token_program,
              instruction_sysvar_account: accounts.instruction_sysvar_account,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(23+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tick_array_lower.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tick_array_upper.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_vault_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_shares_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.shares_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.shares_mint_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.scope_prices.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_infos.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = DepositInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::YVAULTS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(24 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.user.clone());
                        account_infos.push(self.strategy.clone());
                        account_infos.push(self.global_config.clone());
                        account_infos.push(self.pool.clone());
                        account_infos.push(self.position.clone());
                        account_infos.push(self.tick_array_lower.clone());
                        account_infos.push(self.tick_array_upper.clone());
                        account_infos.push(self.token_a_vault.clone());
                        account_infos.push(self.token_b_vault.clone());
                        account_infos.push(self.base_vault_authority.clone());
                        account_infos.push(self.token_a_ata.clone());
                        account_infos.push(self.token_b_ata.clone());
                        account_infos.push(self.token_a_mint.clone());
                        account_infos.push(self.token_b_mint.clone());
                        account_infos.push(self.user_shares_ata.clone());
                        account_infos.push(self.shares_mint.clone());
                        account_infos.push(self.shares_mint_authority.clone());
                        account_infos.push(self.scope_prices.clone());
                        account_infos.push(self.token_infos.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.token_a_token_program.clone());
                        account_infos.push(self.token_b_token_program.clone());
                        account_infos.push(self.instruction_sysvar_account.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Deposit` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` strategy
          ///   2. `[]` global_config
          ///   3. `[]` pool
          ///   4. `[]` position
          ///   5. `[]` tick_array_lower
          ///   6. `[]` tick_array_upper
                ///   7. `[writable]` token_a_vault
                ///   8. `[writable]` token_b_vault
          ///   9. `[]` base_vault_authority
                ///   10. `[writable]` token_a_ata
                ///   11. `[writable]` token_b_ata
          ///   12. `[]` token_a_mint
          ///   13. `[]` token_b_mint
                ///   14. `[writable]` user_shares_ata
                ///   15. `[writable]` shares_mint
          ///   16. `[]` shares_mint_authority
          ///   17. `[]` scope_prices
          ///   18. `[]` token_infos
          ///   19. `[]` token_program
          ///   20. `[]` token_a_token_program
          ///   21. `[]` token_b_token_program
          ///   22. `[]` instruction_sysvar_account
#[derive(Clone, Debug)]
pub struct DepositCpiBuilder<'a, 'b> {
  instruction: Box<DepositCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DepositCpiBuilderInstruction {
      __program: program,
              user: None,
              strategy: None,
              global_config: None,
              pool: None,
              position: None,
              tick_array_lower: None,
              tick_array_upper: None,
              token_a_vault: None,
              token_b_vault: None,
              base_vault_authority: None,
              token_a_ata: None,
              token_b_ata: None,
              token_a_mint: None,
              token_b_mint: None,
              user_shares_ata: None,
              shares_mint: None,
              shares_mint_authority: None,
              scope_prices: None,
              token_infos: None,
              token_program: None,
              token_a_token_program: None,
              token_b_token_program: None,
              instruction_sysvar_account: None,
                                            token_max_a: None,
                                token_max_b: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user = Some(user);
                    self
    }
      #[inline(always)]
    pub fn strategy(&mut self, strategy: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.strategy = Some(strategy);
                    self
    }
      #[inline(always)]
    pub fn global_config(&mut self, global_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_config = Some(global_config);
                    self
    }
      #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pool = Some(pool);
                    self
    }
      #[inline(always)]
    pub fn position(&mut self, position: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position = Some(position);
                    self
    }
      #[inline(always)]
    pub fn tick_array_lower(&mut self, tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tick_array_lower = Some(tick_array_lower);
                    self
    }
      #[inline(always)]
    pub fn tick_array_upper(&mut self, tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tick_array_upper = Some(tick_array_upper);
                    self
    }
      #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_a_vault = Some(token_a_vault);
                    self
    }
      #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_b_vault = Some(token_b_vault);
                    self
    }
      #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_vault_authority = Some(base_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn token_a_ata(&mut self, token_a_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_a_ata = Some(token_a_ata);
                    self
    }
      #[inline(always)]
    pub fn token_b_ata(&mut self, token_b_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_b_ata = Some(token_b_ata);
                    self
    }
      #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_a_mint = Some(token_a_mint);
                    self
    }
      #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_b_mint = Some(token_b_mint);
                    self
    }
      #[inline(always)]
    pub fn user_shares_ata(&mut self, user_shares_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_shares_ata = Some(user_shares_ata);
                    self
    }
      #[inline(always)]
    pub fn shares_mint(&mut self, shares_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.shares_mint = Some(shares_mint);
                    self
    }
      #[inline(always)]
    pub fn shares_mint_authority(&mut self, shares_mint_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.shares_mint_authority = Some(shares_mint_authority);
                    self
    }
      #[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.scope_prices = Some(scope_prices);
                    self
    }
      #[inline(always)]
    pub fn token_infos(&mut self, token_infos: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_infos = Some(token_infos);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn token_a_token_program(&mut self, token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_a_token_program = Some(token_a_token_program);
                    self
    }
      #[inline(always)]
    pub fn token_b_token_program(&mut self, token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_b_token_program = Some(token_b_token_program);
                    self
    }
      #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn token_max_a(&mut self, token_max_a: u64) -> &mut Self {
        self.instruction.token_max_a = Some(token_max_a);
        self
      }
                #[inline(always)]
      pub fn token_max_b(&mut self, token_max_b: u64) -> &mut Self {
        self.instruction.token_max_b = Some(token_max_b);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = DepositInstructionArgs {
                                                              token_max_a: self.instruction.token_max_a.clone().expect("token_max_a is not set"),
                                                                  token_max_b: self.instruction.token_max_b.clone().expect("token_max_b is not set"),
                                    };
        let instruction = DepositCpi {
        __program: self.instruction.__program,
                  
          user: self.instruction.user.expect("user is not set"),
                  
          strategy: self.instruction.strategy.expect("strategy is not set"),
                  
          global_config: self.instruction.global_config.expect("global_config is not set"),
                  
          pool: self.instruction.pool.expect("pool is not set"),
                  
          position: self.instruction.position.expect("position is not set"),
                  
          tick_array_lower: self.instruction.tick_array_lower.expect("tick_array_lower is not set"),
                  
          tick_array_upper: self.instruction.tick_array_upper.expect("tick_array_upper is not set"),
                  
          token_a_vault: self.instruction.token_a_vault.expect("token_a_vault is not set"),
                  
          token_b_vault: self.instruction.token_b_vault.expect("token_b_vault is not set"),
                  
          base_vault_authority: self.instruction.base_vault_authority.expect("base_vault_authority is not set"),
                  
          token_a_ata: self.instruction.token_a_ata.expect("token_a_ata is not set"),
                  
          token_b_ata: self.instruction.token_b_ata.expect("token_b_ata is not set"),
                  
          token_a_mint: self.instruction.token_a_mint.expect("token_a_mint is not set"),
                  
          token_b_mint: self.instruction.token_b_mint.expect("token_b_mint is not set"),
                  
          user_shares_ata: self.instruction.user_shares_ata.expect("user_shares_ata is not set"),
                  
          shares_mint: self.instruction.shares_mint.expect("shares_mint is not set"),
                  
          shares_mint_authority: self.instruction.shares_mint_authority.expect("shares_mint_authority is not set"),
                  
          scope_prices: self.instruction.scope_prices.expect("scope_prices is not set"),
                  
          token_infos: self.instruction.token_infos.expect("token_infos is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          token_a_token_program: self.instruction.token_a_token_program.expect("token_a_token_program is not set"),
                  
          token_b_token_program: self.instruction.token_b_token_program.expect("token_b_token_program is not set"),
                  
          instruction_sysvar_account: self.instruction.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DepositCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tick_array_lower: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tick_array_upper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_a_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_b_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_a_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_b_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_shares_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                shares_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                shares_mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                scope_prices: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_infos: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_a_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_b_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                instruction_sysvar_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        token_max_a: Option<u64>,
                token_max_b: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

