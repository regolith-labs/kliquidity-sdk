//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct OpenLiquidityPosition {
    pub admin_authority: solana_program::pubkey::Pubkey,

    pub strategy: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub tick_array_lower: solana_program::pubkey::Pubkey,

    pub tick_array_upper: solana_program::pubkey::Pubkey,

    pub base_vault_authority: solana_program::pubkey::Pubkey,

    pub position: solana_program::pubkey::Pubkey,

    pub position_mint: solana_program::pubkey::Pubkey,

    pub position_metadata_account: solana_program::pubkey::Pubkey,

    pub position_token_account: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub system: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub token_program2022: solana_program::pubkey::Pubkey,

    pub token_a_token_program: solana_program::pubkey::Pubkey,

    pub token_b_token_program: solana_program::pubkey::Pubkey,

    pub memo_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub pool_program: solana_program::pubkey::Pubkey,

    pub old_tick_array_lower_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_tick_array_upper_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_position_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_position_mint_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_position_token_account_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub token_a_vault: solana_program::pubkey::Pubkey,

    pub token_b_vault: solana_program::pubkey::Pubkey,

    pub token_a_mint: solana_program::pubkey::Pubkey,

    pub token_b_mint: solana_program::pubkey::Pubkey,

    pub pool_token_vault_a: solana_program::pubkey::Pubkey,

    pub pool_token_vault_b: solana_program::pubkey::Pubkey,

    pub scope_prices: solana_program::pubkey::Pubkey,

    pub token_infos: solana_program::pubkey::Pubkey,

    pub event_authority: Option<solana_program::pubkey::Pubkey>,

    pub consensus_account: solana_program::pubkey::Pubkey,
}

impl OpenLiquidityPosition {
    pub fn instruction(
        &self,
        args: OpenLiquidityPositionInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: OpenLiquidityPositionInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(35 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tick_array_lower,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tick_array_upper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_metadata_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.memo_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_tick_array_lower_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_tick_array_upper_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_position_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_position_mint_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_position_token_account_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_token_vault_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_token_vault_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.scope_prices,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_infos,
            false,
        ));
        if let Some(event_authority) = self.event_authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                event_authority,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::YVAULTS_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.consensus_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = OpenLiquidityPositionInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::YVAULTS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OpenLiquidityPositionInstructionData {
    discriminator: [u8; 8],
}

impl OpenLiquidityPositionInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [204, 234, 204, 219, 6, 91, 96, 241],
        }
    }
}

impl Default for OpenLiquidityPositionInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OpenLiquidityPositionInstructionArgs {
    pub tick_lower_index: i64,
    pub tick_upper_index: i64,
    pub bump: u8,
}

/// Instruction builder for `OpenLiquidityPosition`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin_authority
///   1. `[writable]` strategy
///   2. `[]` global_config
///   3. `[writable]` pool
///   4. `[writable]` tick_array_lower
///   5. `[writable]` tick_array_upper
///   6. `[writable]` base_vault_authority
///   7. `[writable]` position
///   8. `[writable]` position_mint
///   9. `[writable]` position_metadata_account
///   10. `[writable]` position_token_account
///   11. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   12. `[]` system
///   13. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   14. `[]` token_program2022
///   15. `[]` token_a_token_program
///   16. `[]` token_b_token_program
///   17. `[]` memo_program
///   18. `[]` associated_token_program
///   19. `[]` pool_program
///   20. `[writable]` old_tick_array_lower_or_base_vault_authority
///   21. `[writable]` old_tick_array_upper_or_base_vault_authority
///   22. `[writable]` old_position_or_base_vault_authority
///   23. `[writable]` old_position_mint_or_base_vault_authority
///   24. `[writable]` old_position_token_account_or_base_vault_authority
///   25. `[writable]` token_a_vault
///   26. `[writable]` token_b_vault
///   27. `[]` token_a_mint
///   28. `[]` token_b_mint
///   29. `[writable]` pool_token_vault_a
///   30. `[writable]` pool_token_vault_b
///   31. `[]` scope_prices
///   32. `[]` token_infos
///   33. `[optional]` event_authority
///   34. `[]` consensus_account
#[derive(Clone, Debug, Default)]
pub struct OpenLiquidityPositionBuilder {
    admin_authority: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    tick_array_lower: Option<solana_program::pubkey::Pubkey>,
    tick_array_upper: Option<solana_program::pubkey::Pubkey>,
    base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    position: Option<solana_program::pubkey::Pubkey>,
    position_mint: Option<solana_program::pubkey::Pubkey>,
    position_metadata_account: Option<solana_program::pubkey::Pubkey>,
    position_token_account: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_program2022: Option<solana_program::pubkey::Pubkey>,
    token_a_token_program: Option<solana_program::pubkey::Pubkey>,
    token_b_token_program: Option<solana_program::pubkey::Pubkey>,
    memo_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    pool_program: Option<solana_program::pubkey::Pubkey>,
    old_tick_array_lower_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_tick_array_upper_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_position_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_position_mint_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_position_token_account_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    token_a_vault: Option<solana_program::pubkey::Pubkey>,
    token_b_vault: Option<solana_program::pubkey::Pubkey>,
    token_a_mint: Option<solana_program::pubkey::Pubkey>,
    token_b_mint: Option<solana_program::pubkey::Pubkey>,
    pool_token_vault_a: Option<solana_program::pubkey::Pubkey>,
    pool_token_vault_b: Option<solana_program::pubkey::Pubkey>,
    scope_prices: Option<solana_program::pubkey::Pubkey>,
    token_infos: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    consensus_account: Option<solana_program::pubkey::Pubkey>,
    tick_lower_index: Option<i64>,
    tick_upper_index: Option<i64>,
    bump: Option<u8>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl OpenLiquidityPositionBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.admin_authority = Some(admin_authority);
        self
    }
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn tick_array_lower(
        &mut self,
        tick_array_lower: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tick_array_lower = Some(tick_array_lower);
        self
    }
    #[inline(always)]
    pub fn tick_array_upper(
        &mut self,
        tick_array_upper: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tick_array_upper = Some(tick_array_upper);
        self
    }
    #[inline(always)]
    pub fn base_vault_authority(
        &mut self,
        base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_vault_authority = Some(base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn position(&mut self, position: solana_program::pubkey::Pubkey) -> &mut Self {
        self.position = Some(position);
        self
    }
    #[inline(always)]
    pub fn position_mint(&mut self, position_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.position_mint = Some(position_mint);
        self
    }
    #[inline(always)]
    pub fn position_metadata_account(
        &mut self,
        position_metadata_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_metadata_account = Some(position_metadata_account);
        self
    }
    #[inline(always)]
    pub fn position_token_account(
        &mut self,
        position_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_token_account = Some(position_token_account);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn system(&mut self, system: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system = Some(system);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }
    #[inline(always)]
    pub fn token_a_token_program(
        &mut self,
        token_a_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_a_token_program = Some(token_a_token_program);
        self
    }
    #[inline(always)]
    pub fn token_b_token_program(
        &mut self,
        token_b_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_b_token_program = Some(token_b_token_program);
        self
    }
    #[inline(always)]
    pub fn memo_program(&mut self, memo_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.memo_program = Some(memo_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn pool_program(&mut self, pool_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_program = Some(pool_program);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_lower_or_base_vault_authority(
        &mut self,
        old_tick_array_lower_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_tick_array_lower_or_base_vault_authority =
            Some(old_tick_array_lower_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_upper_or_base_vault_authority(
        &mut self,
        old_tick_array_upper_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_tick_array_upper_or_base_vault_authority =
            Some(old_tick_array_upper_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_or_base_vault_authority(
        &mut self,
        old_position_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_position_or_base_vault_authority = Some(old_position_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_mint_or_base_vault_authority(
        &mut self,
        old_position_mint_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_position_mint_or_base_vault_authority =
            Some(old_position_mint_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_token_account_or_base_vault_authority(
        &mut self,
        old_position_token_account_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_position_token_account_or_base_vault_authority =
            Some(old_position_token_account_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_mint = Some(token_a_mint);
        self
    }
    #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_mint = Some(token_b_mint);
        self
    }
    #[inline(always)]
    pub fn pool_token_vault_a(
        &mut self,
        pool_token_vault_a: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_token_vault_a = Some(pool_token_vault_a);
        self
    }
    #[inline(always)]
    pub fn pool_token_vault_b(
        &mut self,
        pool_token_vault_b: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_token_vault_b = Some(pool_token_vault_b);
        self
    }
    #[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: solana_program::pubkey::Pubkey) -> &mut Self {
        self.scope_prices = Some(scope_prices);
        self
    }
    #[inline(always)]
    pub fn token_infos(&mut self, token_infos: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_infos = Some(token_infos);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.event_authority = event_authority;
        self
    }
    #[inline(always)]
    pub fn consensus_account(
        &mut self,
        consensus_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.consensus_account = Some(consensus_account);
        self
    }
    #[inline(always)]
    pub fn tick_lower_index(&mut self, tick_lower_index: i64) -> &mut Self {
        self.tick_lower_index = Some(tick_lower_index);
        self
    }
    #[inline(always)]
    pub fn tick_upper_index(&mut self, tick_upper_index: i64) -> &mut Self {
        self.tick_upper_index = Some(tick_upper_index);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = OpenLiquidityPosition {
            admin_authority: self.admin_authority.expect("admin_authority is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            pool: self.pool.expect("pool is not set"),
            tick_array_lower: self.tick_array_lower.expect("tick_array_lower is not set"),
            tick_array_upper: self.tick_array_upper.expect("tick_array_upper is not set"),
            base_vault_authority: self
                .base_vault_authority
                .expect("base_vault_authority is not set"),
            position: self.position.expect("position is not set"),
            position_mint: self.position_mint.expect("position_mint is not set"),
            position_metadata_account: self
                .position_metadata_account
                .expect("position_metadata_account is not set"),
            position_token_account: self
                .position_token_account
                .expect("position_token_account is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system: self.system.expect("system is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self
                .token_program2022
                .expect("token_program2022 is not set"),
            token_a_token_program: self
                .token_a_token_program
                .expect("token_a_token_program is not set"),
            token_b_token_program: self
                .token_b_token_program
                .expect("token_b_token_program is not set"),
            memo_program: self.memo_program.expect("memo_program is not set"),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            pool_program: self.pool_program.expect("pool_program is not set"),
            old_tick_array_lower_or_base_vault_authority: self
                .old_tick_array_lower_or_base_vault_authority
                .expect("old_tick_array_lower_or_base_vault_authority is not set"),
            old_tick_array_upper_or_base_vault_authority: self
                .old_tick_array_upper_or_base_vault_authority
                .expect("old_tick_array_upper_or_base_vault_authority is not set"),
            old_position_or_base_vault_authority: self
                .old_position_or_base_vault_authority
                .expect("old_position_or_base_vault_authority is not set"),
            old_position_mint_or_base_vault_authority: self
                .old_position_mint_or_base_vault_authority
                .expect("old_position_mint_or_base_vault_authority is not set"),
            old_position_token_account_or_base_vault_authority: self
                .old_position_token_account_or_base_vault_authority
                .expect("old_position_token_account_or_base_vault_authority is not set"),
            token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
            token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
            token_a_mint: self.token_a_mint.expect("token_a_mint is not set"),
            token_b_mint: self.token_b_mint.expect("token_b_mint is not set"),
            pool_token_vault_a: self
                .pool_token_vault_a
                .expect("pool_token_vault_a is not set"),
            pool_token_vault_b: self
                .pool_token_vault_b
                .expect("pool_token_vault_b is not set"),
            scope_prices: self.scope_prices.expect("scope_prices is not set"),
            token_infos: self.token_infos.expect("token_infos is not set"),
            event_authority: self.event_authority,
            consensus_account: self
                .consensus_account
                .expect("consensus_account is not set"),
        };
        let args = OpenLiquidityPositionInstructionArgs {
            tick_lower_index: self
                .tick_lower_index
                .clone()
                .expect("tick_lower_index is not set"),
            tick_upper_index: self
                .tick_upper_index
                .clone()
                .expect("tick_upper_index is not set"),
            bump: self.bump.clone().expect("bump is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `open_liquidity_position` CPI accounts.
pub struct OpenLiquidityPositionCpiAccounts<'a, 'b> {
    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub position: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_metadata_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_lower_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_upper_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_mint_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_token_account_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_vault_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_vault_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub consensus_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `open_liquidity_position` CPI instruction.
pub struct OpenLiquidityPositionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub position: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_metadata_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_lower_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_upper_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_mint_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_token_account_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_vault_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_vault_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub consensus_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: OpenLiquidityPositionInstructionArgs,
}

impl<'a, 'b> OpenLiquidityPositionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: OpenLiquidityPositionCpiAccounts<'a, 'b>,
        args: OpenLiquidityPositionInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            admin_authority: accounts.admin_authority,
            strategy: accounts.strategy,
            global_config: accounts.global_config,
            pool: accounts.pool,
            tick_array_lower: accounts.tick_array_lower,
            tick_array_upper: accounts.tick_array_upper,
            base_vault_authority: accounts.base_vault_authority,
            position: accounts.position,
            position_mint: accounts.position_mint,
            position_metadata_account: accounts.position_metadata_account,
            position_token_account: accounts.position_token_account,
            rent: accounts.rent,
            system: accounts.system,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            token_a_token_program: accounts.token_a_token_program,
            token_b_token_program: accounts.token_b_token_program,
            memo_program: accounts.memo_program,
            associated_token_program: accounts.associated_token_program,
            pool_program: accounts.pool_program,
            old_tick_array_lower_or_base_vault_authority: accounts
                .old_tick_array_lower_or_base_vault_authority,
            old_tick_array_upper_or_base_vault_authority: accounts
                .old_tick_array_upper_or_base_vault_authority,
            old_position_or_base_vault_authority: accounts.old_position_or_base_vault_authority,
            old_position_mint_or_base_vault_authority: accounts
                .old_position_mint_or_base_vault_authority,
            old_position_token_account_or_base_vault_authority: accounts
                .old_position_token_account_or_base_vault_authority,
            token_a_vault: accounts.token_a_vault,
            token_b_vault: accounts.token_b_vault,
            token_a_mint: accounts.token_a_mint,
            token_b_mint: accounts.token_b_mint,
            pool_token_vault_a: accounts.pool_token_vault_a,
            pool_token_vault_b: accounts.pool_token_vault_b,
            scope_prices: accounts.scope_prices,
            token_infos: accounts.token_infos,
            event_authority: accounts.event_authority,
            consensus_account: accounts.consensus_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(35 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tick_array_lower.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tick_array_upper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_metadata_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.memo_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_tick_array_lower_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_tick_array_upper_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_position_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_position_mint_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_position_token_account_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_token_vault_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_token_vault_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.scope_prices.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_infos.key,
            false,
        ));
        if let Some(event_authority) = self.event_authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *event_authority.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::YVAULTS_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.consensus_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = OpenLiquidityPositionInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::YVAULTS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(36 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.admin_authority.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.tick_array_lower.clone());
        account_infos.push(self.tick_array_upper.clone());
        account_infos.push(self.base_vault_authority.clone());
        account_infos.push(self.position.clone());
        account_infos.push(self.position_mint.clone());
        account_infos.push(self.position_metadata_account.clone());
        account_infos.push(self.position_token_account.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        account_infos.push(self.token_a_token_program.clone());
        account_infos.push(self.token_b_token_program.clone());
        account_infos.push(self.memo_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.pool_program.clone());
        account_infos.push(self.old_tick_array_lower_or_base_vault_authority.clone());
        account_infos.push(self.old_tick_array_upper_or_base_vault_authority.clone());
        account_infos.push(self.old_position_or_base_vault_authority.clone());
        account_infos.push(self.old_position_mint_or_base_vault_authority.clone());
        account_infos.push(
            self.old_position_token_account_or_base_vault_authority
                .clone(),
        );
        account_infos.push(self.token_a_vault.clone());
        account_infos.push(self.token_b_vault.clone());
        account_infos.push(self.token_a_mint.clone());
        account_infos.push(self.token_b_mint.clone());
        account_infos.push(self.pool_token_vault_a.clone());
        account_infos.push(self.pool_token_vault_b.clone());
        account_infos.push(self.scope_prices.clone());
        account_infos.push(self.token_infos.clone());
        if let Some(event_authority) = self.event_authority {
            account_infos.push(event_authority.clone());
        }
        account_infos.push(self.consensus_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `OpenLiquidityPosition` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin_authority
///   1. `[writable]` strategy
///   2. `[]` global_config
///   3. `[writable]` pool
///   4. `[writable]` tick_array_lower
///   5. `[writable]` tick_array_upper
///   6. `[writable]` base_vault_authority
///   7. `[writable]` position
///   8. `[writable]` position_mint
///   9. `[writable]` position_metadata_account
///   10. `[writable]` position_token_account
///   11. `[]` rent
///   12. `[]` system
///   13. `[]` token_program
///   14. `[]` token_program2022
///   15. `[]` token_a_token_program
///   16. `[]` token_b_token_program
///   17. `[]` memo_program
///   18. `[]` associated_token_program
///   19. `[]` pool_program
///   20. `[writable]` old_tick_array_lower_or_base_vault_authority
///   21. `[writable]` old_tick_array_upper_or_base_vault_authority
///   22. `[writable]` old_position_or_base_vault_authority
///   23. `[writable]` old_position_mint_or_base_vault_authority
///   24. `[writable]` old_position_token_account_or_base_vault_authority
///   25. `[writable]` token_a_vault
///   26. `[writable]` token_b_vault
///   27. `[]` token_a_mint
///   28. `[]` token_b_mint
///   29. `[writable]` pool_token_vault_a
///   30. `[writable]` pool_token_vault_b
///   31. `[]` scope_prices
///   32. `[]` token_infos
///   33. `[optional]` event_authority
///   34. `[]` consensus_account
#[derive(Clone, Debug)]
pub struct OpenLiquidityPositionCpiBuilder<'a, 'b> {
    instruction: Box<OpenLiquidityPositionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OpenLiquidityPositionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(OpenLiquidityPositionCpiBuilderInstruction {
            __program: program,
            admin_authority: None,
            strategy: None,
            global_config: None,
            pool: None,
            tick_array_lower: None,
            tick_array_upper: None,
            base_vault_authority: None,
            position: None,
            position_mint: None,
            position_metadata_account: None,
            position_token_account: None,
            rent: None,
            system: None,
            token_program: None,
            token_program2022: None,
            token_a_token_program: None,
            token_b_token_program: None,
            memo_program: None,
            associated_token_program: None,
            pool_program: None,
            old_tick_array_lower_or_base_vault_authority: None,
            old_tick_array_upper_or_base_vault_authority: None,
            old_position_or_base_vault_authority: None,
            old_position_mint_or_base_vault_authority: None,
            old_position_token_account_or_base_vault_authority: None,
            token_a_vault: None,
            token_b_vault: None,
            token_a_mint: None,
            token_b_mint: None,
            pool_token_vault_a: None,
            pool_token_vault_b: None,
            scope_prices: None,
            token_infos: None,
            event_authority: None,
            consensus_account: None,
            tick_lower_index: None,
            tick_upper_index: None,
            bump: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.admin_authority = Some(admin_authority);
        self
    }
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn tick_array_lower(
        &mut self,
        tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_lower = Some(tick_array_lower);
        self
    }
    #[inline(always)]
    pub fn tick_array_upper(
        &mut self,
        tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_upper = Some(tick_array_upper);
        self
    }
    #[inline(always)]
    pub fn base_vault_authority(
        &mut self,
        base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault_authority = Some(base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn position(
        &mut self,
        position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position = Some(position);
        self
    }
    #[inline(always)]
    pub fn position_mint(
        &mut self,
        position_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_mint = Some(position_mint);
        self
    }
    #[inline(always)]
    pub fn position_metadata_account(
        &mut self,
        position_metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_metadata_account = Some(position_metadata_account);
        self
    }
    #[inline(always)]
    pub fn position_token_account(
        &mut self,
        position_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_token_account = Some(position_token_account);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn system(
        &mut self,
        system: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system = Some(system);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }
    #[inline(always)]
    pub fn token_a_token_program(
        &mut self,
        token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_token_program = Some(token_a_token_program);
        self
    }
    #[inline(always)]
    pub fn token_b_token_program(
        &mut self,
        token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_token_program = Some(token_b_token_program);
        self
    }
    #[inline(always)]
    pub fn memo_program(
        &mut self,
        memo_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.memo_program = Some(memo_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn pool_program(
        &mut self,
        pool_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_program = Some(pool_program);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_lower_or_base_vault_authority(
        &mut self,
        old_tick_array_lower_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<
            'a,
        >,
    ) -> &mut Self {
        self.instruction
            .old_tick_array_lower_or_base_vault_authority =
            Some(old_tick_array_lower_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_upper_or_base_vault_authority(
        &mut self,
        old_tick_array_upper_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<
            'a,
        >,
    ) -> &mut Self {
        self.instruction
            .old_tick_array_upper_or_base_vault_authority =
            Some(old_tick_array_upper_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_or_base_vault_authority(
        &mut self,
        old_position_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.old_position_or_base_vault_authority =
            Some(old_position_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_mint_or_base_vault_authority(
        &mut self,
        old_position_mint_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<
            'a,
        >,
    ) -> &mut Self {
        self.instruction.old_position_mint_or_base_vault_authority =
            Some(old_position_mint_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_token_account_or_base_vault_authority(
        &mut self,
        old_position_token_account_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction
            .old_position_token_account_or_base_vault_authority =
            Some(old_position_token_account_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(
        &mut self,
        token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(
        &mut self,
        token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn token_a_mint(
        &mut self,
        token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_mint = Some(token_a_mint);
        self
    }
    #[inline(always)]
    pub fn token_b_mint(
        &mut self,
        token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_mint = Some(token_b_mint);
        self
    }
    #[inline(always)]
    pub fn pool_token_vault_a(
        &mut self,
        pool_token_vault_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token_vault_a = Some(pool_token_vault_a);
        self
    }
    #[inline(always)]
    pub fn pool_token_vault_b(
        &mut self,
        pool_token_vault_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token_vault_b = Some(pool_token_vault_b);
        self
    }
    #[inline(always)]
    pub fn scope_prices(
        &mut self,
        scope_prices: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.scope_prices = Some(scope_prices);
        self
    }
    #[inline(always)]
    pub fn token_infos(
        &mut self,
        token_infos: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_infos = Some(token_infos);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.event_authority = event_authority;
        self
    }
    #[inline(always)]
    pub fn consensus_account(
        &mut self,
        consensus_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.consensus_account = Some(consensus_account);
        self
    }
    #[inline(always)]
    pub fn tick_lower_index(&mut self, tick_lower_index: i64) -> &mut Self {
        self.instruction.tick_lower_index = Some(tick_lower_index);
        self
    }
    #[inline(always)]
    pub fn tick_upper_index(&mut self, tick_upper_index: i64) -> &mut Self {
        self.instruction.tick_upper_index = Some(tick_upper_index);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.instruction.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = OpenLiquidityPositionInstructionArgs {
            tick_lower_index: self
                .instruction
                .tick_lower_index
                .clone()
                .expect("tick_lower_index is not set"),
            tick_upper_index: self
                .instruction
                .tick_upper_index
                .clone()
                .expect("tick_upper_index is not set"),
            bump: self.instruction.bump.clone().expect("bump is not set"),
        };
        let instruction = OpenLiquidityPositionCpi {
            __program: self.instruction.__program,

            admin_authority: self
                .instruction
                .admin_authority
                .expect("admin_authority is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            tick_array_lower: self
                .instruction
                .tick_array_lower
                .expect("tick_array_lower is not set"),

            tick_array_upper: self
                .instruction
                .tick_array_upper
                .expect("tick_array_upper is not set"),

            base_vault_authority: self
                .instruction
                .base_vault_authority
                .expect("base_vault_authority is not set"),

            position: self.instruction.position.expect("position is not set"),

            position_mint: self
                .instruction
                .position_mint
                .expect("position_mint is not set"),

            position_metadata_account: self
                .instruction
                .position_metadata_account
                .expect("position_metadata_account is not set"),

            position_token_account: self
                .instruction
                .position_token_account
                .expect("position_token_account is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system: self.instruction.system.expect("system is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),

            token_a_token_program: self
                .instruction
                .token_a_token_program
                .expect("token_a_token_program is not set"),

            token_b_token_program: self
                .instruction
                .token_b_token_program
                .expect("token_b_token_program is not set"),

            memo_program: self
                .instruction
                .memo_program
                .expect("memo_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            pool_program: self
                .instruction
                .pool_program
                .expect("pool_program is not set"),

            old_tick_array_lower_or_base_vault_authority: self
                .instruction
                .old_tick_array_lower_or_base_vault_authority
                .expect("old_tick_array_lower_or_base_vault_authority is not set"),

            old_tick_array_upper_or_base_vault_authority: self
                .instruction
                .old_tick_array_upper_or_base_vault_authority
                .expect("old_tick_array_upper_or_base_vault_authority is not set"),

            old_position_or_base_vault_authority: self
                .instruction
                .old_position_or_base_vault_authority
                .expect("old_position_or_base_vault_authority is not set"),

            old_position_mint_or_base_vault_authority: self
                .instruction
                .old_position_mint_or_base_vault_authority
                .expect("old_position_mint_or_base_vault_authority is not set"),

            old_position_token_account_or_base_vault_authority: self
                .instruction
                .old_position_token_account_or_base_vault_authority
                .expect("old_position_token_account_or_base_vault_authority is not set"),

            token_a_vault: self
                .instruction
                .token_a_vault
                .expect("token_a_vault is not set"),

            token_b_vault: self
                .instruction
                .token_b_vault
                .expect("token_b_vault is not set"),

            token_a_mint: self
                .instruction
                .token_a_mint
                .expect("token_a_mint is not set"),

            token_b_mint: self
                .instruction
                .token_b_mint
                .expect("token_b_mint is not set"),

            pool_token_vault_a: self
                .instruction
                .pool_token_vault_a
                .expect("pool_token_vault_a is not set"),

            pool_token_vault_b: self
                .instruction
                .pool_token_vault_b
                .expect("pool_token_vault_b is not set"),

            scope_prices: self
                .instruction
                .scope_prices
                .expect("scope_prices is not set"),

            token_infos: self
                .instruction
                .token_infos
                .expect("token_infos is not set"),

            event_authority: self.instruction.event_authority,

            consensus_account: self
                .instruction
                .consensus_account
                .expect("consensus_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct OpenLiquidityPositionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    admin_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_array_lower: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_array_upper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_metadata_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    memo_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_tick_array_lower_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_tick_array_upper_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_position_or_base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_position_mint_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_position_token_account_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_vault_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_vault_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    scope_prices: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_infos: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    consensus_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_lower_index: Option<i64>,
    tick_upper_index: Option<i64>,
    bump: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
