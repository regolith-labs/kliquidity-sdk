//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct CloseStrategy {
    pub admin_authority: solana_program::pubkey::Pubkey,

    pub strategy: solana_program::pubkey::Pubkey,

    pub old_position_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_position_mint_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_position_token_account_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_tick_array_lower_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub old_tick_array_upper_or_base_vault_authority: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub token_a_vault: solana_program::pubkey::Pubkey,

    pub token_b_vault: solana_program::pubkey::Pubkey,

    pub user_token_a_ata: solana_program::pubkey::Pubkey,

    pub user_token_b_ata: solana_program::pubkey::Pubkey,

    pub token_a_mint: solana_program::pubkey::Pubkey,

    pub token_b_mint: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward0_vault: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward1_vault: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward2_vault: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward0_vault: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward1_vault: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward2_vault: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward0_ata: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward1_ata: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward2_ata: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward0_ata: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward1_ata: solana_program::pubkey::Pubkey,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward2_ata: solana_program::pubkey::Pubkey,

    pub base_vault_authority: solana_program::pubkey::Pubkey,

    pub pool_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub token_a_token_program: solana_program::pubkey::Pubkey,

    pub token_b_token_program: solana_program::pubkey::Pubkey,

    pub system: solana_program::pubkey::Pubkey,

    pub event_authority: Option<solana_program::pubkey::Pubkey>,
}

impl CloseStrategy {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(33 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_position_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_position_mint_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_position_token_account_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_tick_array_lower_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.old_tick_array_upper_or_base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_a_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_b_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reward0_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reward1_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reward2_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.kamino_reward0_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.kamino_reward1_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.kamino_reward2_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_reward0_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_reward1_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_reward2_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_kamino_reward0_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_kamino_reward1_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_kamino_reward2_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system,
            false,
        ));
        if let Some(event_authority) = self.event_authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                event_authority,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::YVAULTS_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let data = CloseStrategyInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::YVAULTS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseStrategyInstructionData {
    discriminator: [u8; 8],
}

impl CloseStrategyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [56, 247, 170, 246, 89, 221, 134, 200],
        }
    }
}

impl Default for CloseStrategyInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `CloseStrategy`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin_authority
///   1. `[writable]` strategy
///   2. `[writable]` old_position_or_base_vault_authority
///   3. `[writable]` old_position_mint_or_base_vault_authority
///   4. `[writable]` old_position_token_account_or_base_vault_authority
///   5. `[writable]` old_tick_array_lower_or_base_vault_authority
///   6. `[writable]` old_tick_array_upper_or_base_vault_authority
///   7. `[]` pool
///   8. `[writable]` token_a_vault
///   9. `[writable]` token_b_vault
///   10. `[writable]` user_token_a_ata
///   11. `[writable]` user_token_b_ata
///   12. `[writable]` token_a_mint
///   13. `[writable]` token_b_mint
///   14. `[writable]` reward0_vault
///   15. `[writable]` reward1_vault
///   16. `[writable]` reward2_vault
///   17. `[writable]` kamino_reward0_vault
///   18. `[writable]` kamino_reward1_vault
///   19. `[writable]` kamino_reward2_vault
///   20. `[writable]` user_reward0_ata
///   21. `[writable]` user_reward1_ata
///   22. `[writable]` user_reward2_ata
///   23. `[writable]` user_kamino_reward0_ata
///   24. `[writable]` user_kamino_reward1_ata
///   25. `[writable]` user_kamino_reward2_ata
///   26. `[writable]` base_vault_authority
///   27. `[]` pool_program
///   28. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   29. `[]` token_a_token_program
///   30. `[]` token_b_token_program
///   31. `[]` system
///   32. `[optional]` event_authority
#[derive(Clone, Debug, Default)]
pub struct CloseStrategyBuilder {
    admin_authority: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    old_position_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_position_mint_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_position_token_account_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_tick_array_lower_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    old_tick_array_upper_or_base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    token_a_vault: Option<solana_program::pubkey::Pubkey>,
    token_b_vault: Option<solana_program::pubkey::Pubkey>,
    user_token_a_ata: Option<solana_program::pubkey::Pubkey>,
    user_token_b_ata: Option<solana_program::pubkey::Pubkey>,
    token_a_mint: Option<solana_program::pubkey::Pubkey>,
    token_b_mint: Option<solana_program::pubkey::Pubkey>,
    reward0_vault: Option<solana_program::pubkey::Pubkey>,
    reward1_vault: Option<solana_program::pubkey::Pubkey>,
    reward2_vault: Option<solana_program::pubkey::Pubkey>,
    kamino_reward0_vault: Option<solana_program::pubkey::Pubkey>,
    kamino_reward1_vault: Option<solana_program::pubkey::Pubkey>,
    kamino_reward2_vault: Option<solana_program::pubkey::Pubkey>,
    user_reward0_ata: Option<solana_program::pubkey::Pubkey>,
    user_reward1_ata: Option<solana_program::pubkey::Pubkey>,
    user_reward2_ata: Option<solana_program::pubkey::Pubkey>,
    user_kamino_reward0_ata: Option<solana_program::pubkey::Pubkey>,
    user_kamino_reward1_ata: Option<solana_program::pubkey::Pubkey>,
    user_kamino_reward2_ata: Option<solana_program::pubkey::Pubkey>,
    base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    pool_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_a_token_program: Option<solana_program::pubkey::Pubkey>,
    token_b_token_program: Option<solana_program::pubkey::Pubkey>,
    system: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CloseStrategyBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.admin_authority = Some(admin_authority);
        self
    }
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn old_position_or_base_vault_authority(
        &mut self,
        old_position_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_position_or_base_vault_authority = Some(old_position_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_mint_or_base_vault_authority(
        &mut self,
        old_position_mint_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_position_mint_or_base_vault_authority =
            Some(old_position_mint_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_token_account_or_base_vault_authority(
        &mut self,
        old_position_token_account_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_position_token_account_or_base_vault_authority =
            Some(old_position_token_account_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_lower_or_base_vault_authority(
        &mut self,
        old_tick_array_lower_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_tick_array_lower_or_base_vault_authority =
            Some(old_tick_array_lower_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_upper_or_base_vault_authority(
        &mut self,
        old_tick_array_upper_or_base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.old_tick_array_upper_or_base_vault_authority =
            Some(old_tick_array_upper_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn user_token_a_ata(
        &mut self,
        user_token_a_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_token_a_ata = Some(user_token_a_ata);
        self
    }
    #[inline(always)]
    pub fn user_token_b_ata(
        &mut self,
        user_token_b_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_token_b_ata = Some(user_token_b_ata);
        self
    }
    #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_mint = Some(token_a_mint);
        self
    }
    #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_mint = Some(token_b_mint);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn reward0_vault(&mut self, reward0_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reward0_vault = Some(reward0_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn reward1_vault(&mut self, reward1_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reward1_vault = Some(reward1_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn reward2_vault(&mut self, reward2_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reward2_vault = Some(reward2_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn kamino_reward0_vault(
        &mut self,
        kamino_reward0_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.kamino_reward0_vault = Some(kamino_reward0_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn kamino_reward1_vault(
        &mut self,
        kamino_reward1_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.kamino_reward1_vault = Some(kamino_reward1_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn kamino_reward2_vault(
        &mut self,
        kamino_reward2_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.kamino_reward2_vault = Some(kamino_reward2_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_reward0_ata(
        &mut self,
        user_reward0_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_reward0_ata = Some(user_reward0_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_reward1_ata(
        &mut self,
        user_reward1_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_reward1_ata = Some(user_reward1_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_reward2_ata(
        &mut self,
        user_reward2_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_reward2_ata = Some(user_reward2_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_kamino_reward0_ata(
        &mut self,
        user_kamino_reward0_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_kamino_reward0_ata = Some(user_kamino_reward0_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_kamino_reward1_ata(
        &mut self,
        user_kamino_reward1_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_kamino_reward1_ata = Some(user_kamino_reward1_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_kamino_reward2_ata(
        &mut self,
        user_kamino_reward2_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_kamino_reward2_ata = Some(user_kamino_reward2_ata);
        self
    }
    #[inline(always)]
    pub fn base_vault_authority(
        &mut self,
        base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_vault_authority = Some(base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn pool_program(&mut self, pool_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_program = Some(pool_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_a_token_program(
        &mut self,
        token_a_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_a_token_program = Some(token_a_token_program);
        self
    }
    #[inline(always)]
    pub fn token_b_token_program(
        &mut self,
        token_b_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_b_token_program = Some(token_b_token_program);
        self
    }
    #[inline(always)]
    pub fn system(&mut self, system: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system = Some(system);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.event_authority = event_authority;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CloseStrategy {
            admin_authority: self.admin_authority.expect("admin_authority is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            old_position_or_base_vault_authority: self
                .old_position_or_base_vault_authority
                .expect("old_position_or_base_vault_authority is not set"),
            old_position_mint_or_base_vault_authority: self
                .old_position_mint_or_base_vault_authority
                .expect("old_position_mint_or_base_vault_authority is not set"),
            old_position_token_account_or_base_vault_authority: self
                .old_position_token_account_or_base_vault_authority
                .expect("old_position_token_account_or_base_vault_authority is not set"),
            old_tick_array_lower_or_base_vault_authority: self
                .old_tick_array_lower_or_base_vault_authority
                .expect("old_tick_array_lower_or_base_vault_authority is not set"),
            old_tick_array_upper_or_base_vault_authority: self
                .old_tick_array_upper_or_base_vault_authority
                .expect("old_tick_array_upper_or_base_vault_authority is not set"),
            pool: self.pool.expect("pool is not set"),
            token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
            token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
            user_token_a_ata: self.user_token_a_ata.expect("user_token_a_ata is not set"),
            user_token_b_ata: self.user_token_b_ata.expect("user_token_b_ata is not set"),
            token_a_mint: self.token_a_mint.expect("token_a_mint is not set"),
            token_b_mint: self.token_b_mint.expect("token_b_mint is not set"),
            reward0_vault: self.reward0_vault.expect("reward0_vault is not set"),
            reward1_vault: self.reward1_vault.expect("reward1_vault is not set"),
            reward2_vault: self.reward2_vault.expect("reward2_vault is not set"),
            kamino_reward0_vault: self
                .kamino_reward0_vault
                .expect("kamino_reward0_vault is not set"),
            kamino_reward1_vault: self
                .kamino_reward1_vault
                .expect("kamino_reward1_vault is not set"),
            kamino_reward2_vault: self
                .kamino_reward2_vault
                .expect("kamino_reward2_vault is not set"),
            user_reward0_ata: self.user_reward0_ata.expect("user_reward0_ata is not set"),
            user_reward1_ata: self.user_reward1_ata.expect("user_reward1_ata is not set"),
            user_reward2_ata: self.user_reward2_ata.expect("user_reward2_ata is not set"),
            user_kamino_reward0_ata: self
                .user_kamino_reward0_ata
                .expect("user_kamino_reward0_ata is not set"),
            user_kamino_reward1_ata: self
                .user_kamino_reward1_ata
                .expect("user_kamino_reward1_ata is not set"),
            user_kamino_reward2_ata: self
                .user_kamino_reward2_ata
                .expect("user_kamino_reward2_ata is not set"),
            base_vault_authority: self
                .base_vault_authority
                .expect("base_vault_authority is not set"),
            pool_program: self.pool_program.expect("pool_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_a_token_program: self
                .token_a_token_program
                .expect("token_a_token_program is not set"),
            token_b_token_program: self
                .token_b_token_program
                .expect("token_b_token_program is not set"),
            system: self.system.expect("system is not set"),
            event_authority: self.event_authority,
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `close_strategy` CPI accounts.
pub struct CloseStrategyCpiAccounts<'a, 'b> {
    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_mint_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_token_account_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_lower_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_upper_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward2_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward2_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward0_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward1_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward2_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward0_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward1_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward2_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `close_strategy` CPI instruction.
pub struct CloseStrategyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_mint_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_position_token_account_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_lower_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub old_tick_array_upper_or_base_vault_authority:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub reward2_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub kamino_reward2_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward0_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward1_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_reward2_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward0_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward1_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// If rewards are uninitialized, pass this as strategy.
    pub user_kamino_reward2_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

impl<'a, 'b> CloseStrategyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CloseStrategyCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            admin_authority: accounts.admin_authority,
            strategy: accounts.strategy,
            old_position_or_base_vault_authority: accounts.old_position_or_base_vault_authority,
            old_position_mint_or_base_vault_authority: accounts
                .old_position_mint_or_base_vault_authority,
            old_position_token_account_or_base_vault_authority: accounts
                .old_position_token_account_or_base_vault_authority,
            old_tick_array_lower_or_base_vault_authority: accounts
                .old_tick_array_lower_or_base_vault_authority,
            old_tick_array_upper_or_base_vault_authority: accounts
                .old_tick_array_upper_or_base_vault_authority,
            pool: accounts.pool,
            token_a_vault: accounts.token_a_vault,
            token_b_vault: accounts.token_b_vault,
            user_token_a_ata: accounts.user_token_a_ata,
            user_token_b_ata: accounts.user_token_b_ata,
            token_a_mint: accounts.token_a_mint,
            token_b_mint: accounts.token_b_mint,
            reward0_vault: accounts.reward0_vault,
            reward1_vault: accounts.reward1_vault,
            reward2_vault: accounts.reward2_vault,
            kamino_reward0_vault: accounts.kamino_reward0_vault,
            kamino_reward1_vault: accounts.kamino_reward1_vault,
            kamino_reward2_vault: accounts.kamino_reward2_vault,
            user_reward0_ata: accounts.user_reward0_ata,
            user_reward1_ata: accounts.user_reward1_ata,
            user_reward2_ata: accounts.user_reward2_ata,
            user_kamino_reward0_ata: accounts.user_kamino_reward0_ata,
            user_kamino_reward1_ata: accounts.user_kamino_reward1_ata,
            user_kamino_reward2_ata: accounts.user_kamino_reward2_ata,
            base_vault_authority: accounts.base_vault_authority,
            pool_program: accounts.pool_program,
            token_program: accounts.token_program,
            token_a_token_program: accounts.token_a_token_program,
            token_b_token_program: accounts.token_b_token_program,
            system: accounts.system,
            event_authority: accounts.event_authority,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(33 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_position_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_position_mint_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_position_token_account_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_tick_array_lower_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.old_tick_array_upper_or_base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_a_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_b_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reward0_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reward1_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reward2_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.kamino_reward0_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.kamino_reward1_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.kamino_reward2_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_reward0_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_reward1_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_reward2_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_kamino_reward0_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_kamino_reward1_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_kamino_reward2_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system.key,
            false,
        ));
        if let Some(event_authority) = self.event_authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *event_authority.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::YVAULTS_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = CloseStrategyInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::YVAULTS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(34 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.admin_authority.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.old_position_or_base_vault_authority.clone());
        account_infos.push(self.old_position_mint_or_base_vault_authority.clone());
        account_infos.push(
            self.old_position_token_account_or_base_vault_authority
                .clone(),
        );
        account_infos.push(self.old_tick_array_lower_or_base_vault_authority.clone());
        account_infos.push(self.old_tick_array_upper_or_base_vault_authority.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.token_a_vault.clone());
        account_infos.push(self.token_b_vault.clone());
        account_infos.push(self.user_token_a_ata.clone());
        account_infos.push(self.user_token_b_ata.clone());
        account_infos.push(self.token_a_mint.clone());
        account_infos.push(self.token_b_mint.clone());
        account_infos.push(self.reward0_vault.clone());
        account_infos.push(self.reward1_vault.clone());
        account_infos.push(self.reward2_vault.clone());
        account_infos.push(self.kamino_reward0_vault.clone());
        account_infos.push(self.kamino_reward1_vault.clone());
        account_infos.push(self.kamino_reward2_vault.clone());
        account_infos.push(self.user_reward0_ata.clone());
        account_infos.push(self.user_reward1_ata.clone());
        account_infos.push(self.user_reward2_ata.clone());
        account_infos.push(self.user_kamino_reward0_ata.clone());
        account_infos.push(self.user_kamino_reward1_ata.clone());
        account_infos.push(self.user_kamino_reward2_ata.clone());
        account_infos.push(self.base_vault_authority.clone());
        account_infos.push(self.pool_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_a_token_program.clone());
        account_infos.push(self.token_b_token_program.clone());
        account_infos.push(self.system.clone());
        if let Some(event_authority) = self.event_authority {
            account_infos.push(event_authority.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CloseStrategy` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin_authority
///   1. `[writable]` strategy
///   2. `[writable]` old_position_or_base_vault_authority
///   3. `[writable]` old_position_mint_or_base_vault_authority
///   4. `[writable]` old_position_token_account_or_base_vault_authority
///   5. `[writable]` old_tick_array_lower_or_base_vault_authority
///   6. `[writable]` old_tick_array_upper_or_base_vault_authority
///   7. `[]` pool
///   8. `[writable]` token_a_vault
///   9. `[writable]` token_b_vault
///   10. `[writable]` user_token_a_ata
///   11. `[writable]` user_token_b_ata
///   12. `[writable]` token_a_mint
///   13. `[writable]` token_b_mint
///   14. `[writable]` reward0_vault
///   15. `[writable]` reward1_vault
///   16. `[writable]` reward2_vault
///   17. `[writable]` kamino_reward0_vault
///   18. `[writable]` kamino_reward1_vault
///   19. `[writable]` kamino_reward2_vault
///   20. `[writable]` user_reward0_ata
///   21. `[writable]` user_reward1_ata
///   22. `[writable]` user_reward2_ata
///   23. `[writable]` user_kamino_reward0_ata
///   24. `[writable]` user_kamino_reward1_ata
///   25. `[writable]` user_kamino_reward2_ata
///   26. `[writable]` base_vault_authority
///   27. `[]` pool_program
///   28. `[]` token_program
///   29. `[]` token_a_token_program
///   30. `[]` token_b_token_program
///   31. `[]` system
///   32. `[optional]` event_authority
#[derive(Clone, Debug)]
pub struct CloseStrategyCpiBuilder<'a, 'b> {
    instruction: Box<CloseStrategyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseStrategyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CloseStrategyCpiBuilderInstruction {
            __program: program,
            admin_authority: None,
            strategy: None,
            old_position_or_base_vault_authority: None,
            old_position_mint_or_base_vault_authority: None,
            old_position_token_account_or_base_vault_authority: None,
            old_tick_array_lower_or_base_vault_authority: None,
            old_tick_array_upper_or_base_vault_authority: None,
            pool: None,
            token_a_vault: None,
            token_b_vault: None,
            user_token_a_ata: None,
            user_token_b_ata: None,
            token_a_mint: None,
            token_b_mint: None,
            reward0_vault: None,
            reward1_vault: None,
            reward2_vault: None,
            kamino_reward0_vault: None,
            kamino_reward1_vault: None,
            kamino_reward2_vault: None,
            user_reward0_ata: None,
            user_reward1_ata: None,
            user_reward2_ata: None,
            user_kamino_reward0_ata: None,
            user_kamino_reward1_ata: None,
            user_kamino_reward2_ata: None,
            base_vault_authority: None,
            pool_program: None,
            token_program: None,
            token_a_token_program: None,
            token_b_token_program: None,
            system: None,
            event_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.admin_authority = Some(admin_authority);
        self
    }
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn old_position_or_base_vault_authority(
        &mut self,
        old_position_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.old_position_or_base_vault_authority =
            Some(old_position_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_mint_or_base_vault_authority(
        &mut self,
        old_position_mint_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<
            'a,
        >,
    ) -> &mut Self {
        self.instruction.old_position_mint_or_base_vault_authority =
            Some(old_position_mint_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_position_token_account_or_base_vault_authority(
        &mut self,
        old_position_token_account_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction
            .old_position_token_account_or_base_vault_authority =
            Some(old_position_token_account_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_lower_or_base_vault_authority(
        &mut self,
        old_tick_array_lower_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<
            'a,
        >,
    ) -> &mut Self {
        self.instruction
            .old_tick_array_lower_or_base_vault_authority =
            Some(old_tick_array_lower_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn old_tick_array_upper_or_base_vault_authority(
        &mut self,
        old_tick_array_upper_or_base_vault_authority: &'b solana_program::account_info::AccountInfo<
            'a,
        >,
    ) -> &mut Self {
        self.instruction
            .old_tick_array_upper_or_base_vault_authority =
            Some(old_tick_array_upper_or_base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(
        &mut self,
        token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(
        &mut self,
        token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn user_token_a_ata(
        &mut self,
        user_token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_a_ata = Some(user_token_a_ata);
        self
    }
    #[inline(always)]
    pub fn user_token_b_ata(
        &mut self,
        user_token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_b_ata = Some(user_token_b_ata);
        self
    }
    #[inline(always)]
    pub fn token_a_mint(
        &mut self,
        token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_mint = Some(token_a_mint);
        self
    }
    #[inline(always)]
    pub fn token_b_mint(
        &mut self,
        token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_mint = Some(token_b_mint);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn reward0_vault(
        &mut self,
        reward0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward0_vault = Some(reward0_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn reward1_vault(
        &mut self,
        reward1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward1_vault = Some(reward1_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn reward2_vault(
        &mut self,
        reward2_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward2_vault = Some(reward2_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn kamino_reward0_vault(
        &mut self,
        kamino_reward0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.kamino_reward0_vault = Some(kamino_reward0_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn kamino_reward1_vault(
        &mut self,
        kamino_reward1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.kamino_reward1_vault = Some(kamino_reward1_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn kamino_reward2_vault(
        &mut self,
        kamino_reward2_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.kamino_reward2_vault = Some(kamino_reward2_vault);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_reward0_ata(
        &mut self,
        user_reward0_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_reward0_ata = Some(user_reward0_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_reward1_ata(
        &mut self,
        user_reward1_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_reward1_ata = Some(user_reward1_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_reward2_ata(
        &mut self,
        user_reward2_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_reward2_ata = Some(user_reward2_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_kamino_reward0_ata(
        &mut self,
        user_kamino_reward0_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_kamino_reward0_ata = Some(user_kamino_reward0_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_kamino_reward1_ata(
        &mut self,
        user_kamino_reward1_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_kamino_reward1_ata = Some(user_kamino_reward1_ata);
        self
    }
    /// If rewards are uninitialized, pass this as strategy.
    #[inline(always)]
    pub fn user_kamino_reward2_ata(
        &mut self,
        user_kamino_reward2_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_kamino_reward2_ata = Some(user_kamino_reward2_ata);
        self
    }
    #[inline(always)]
    pub fn base_vault_authority(
        &mut self,
        base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault_authority = Some(base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn pool_program(
        &mut self,
        pool_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_program = Some(pool_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_a_token_program(
        &mut self,
        token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_token_program = Some(token_a_token_program);
        self
    }
    #[inline(always)]
    pub fn token_b_token_program(
        &mut self,
        token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_token_program = Some(token_b_token_program);
        self
    }
    #[inline(always)]
    pub fn system(
        &mut self,
        system: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system = Some(system);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.event_authority = event_authority;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CloseStrategyCpi {
            __program: self.instruction.__program,

            admin_authority: self
                .instruction
                .admin_authority
                .expect("admin_authority is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            old_position_or_base_vault_authority: self
                .instruction
                .old_position_or_base_vault_authority
                .expect("old_position_or_base_vault_authority is not set"),

            old_position_mint_or_base_vault_authority: self
                .instruction
                .old_position_mint_or_base_vault_authority
                .expect("old_position_mint_or_base_vault_authority is not set"),

            old_position_token_account_or_base_vault_authority: self
                .instruction
                .old_position_token_account_or_base_vault_authority
                .expect("old_position_token_account_or_base_vault_authority is not set"),

            old_tick_array_lower_or_base_vault_authority: self
                .instruction
                .old_tick_array_lower_or_base_vault_authority
                .expect("old_tick_array_lower_or_base_vault_authority is not set"),

            old_tick_array_upper_or_base_vault_authority: self
                .instruction
                .old_tick_array_upper_or_base_vault_authority
                .expect("old_tick_array_upper_or_base_vault_authority is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            token_a_vault: self
                .instruction
                .token_a_vault
                .expect("token_a_vault is not set"),

            token_b_vault: self
                .instruction
                .token_b_vault
                .expect("token_b_vault is not set"),

            user_token_a_ata: self
                .instruction
                .user_token_a_ata
                .expect("user_token_a_ata is not set"),

            user_token_b_ata: self
                .instruction
                .user_token_b_ata
                .expect("user_token_b_ata is not set"),

            token_a_mint: self
                .instruction
                .token_a_mint
                .expect("token_a_mint is not set"),

            token_b_mint: self
                .instruction
                .token_b_mint
                .expect("token_b_mint is not set"),

            reward0_vault: self
                .instruction
                .reward0_vault
                .expect("reward0_vault is not set"),

            reward1_vault: self
                .instruction
                .reward1_vault
                .expect("reward1_vault is not set"),

            reward2_vault: self
                .instruction
                .reward2_vault
                .expect("reward2_vault is not set"),

            kamino_reward0_vault: self
                .instruction
                .kamino_reward0_vault
                .expect("kamino_reward0_vault is not set"),

            kamino_reward1_vault: self
                .instruction
                .kamino_reward1_vault
                .expect("kamino_reward1_vault is not set"),

            kamino_reward2_vault: self
                .instruction
                .kamino_reward2_vault
                .expect("kamino_reward2_vault is not set"),

            user_reward0_ata: self
                .instruction
                .user_reward0_ata
                .expect("user_reward0_ata is not set"),

            user_reward1_ata: self
                .instruction
                .user_reward1_ata
                .expect("user_reward1_ata is not set"),

            user_reward2_ata: self
                .instruction
                .user_reward2_ata
                .expect("user_reward2_ata is not set"),

            user_kamino_reward0_ata: self
                .instruction
                .user_kamino_reward0_ata
                .expect("user_kamino_reward0_ata is not set"),

            user_kamino_reward1_ata: self
                .instruction
                .user_kamino_reward1_ata
                .expect("user_kamino_reward1_ata is not set"),

            user_kamino_reward2_ata: self
                .instruction
                .user_kamino_reward2_ata
                .expect("user_kamino_reward2_ata is not set"),

            base_vault_authority: self
                .instruction
                .base_vault_authority
                .expect("base_vault_authority is not set"),

            pool_program: self
                .instruction
                .pool_program
                .expect("pool_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_a_token_program: self
                .instruction
                .token_a_token_program
                .expect("token_a_token_program is not set"),

            token_b_token_program: self
                .instruction
                .token_b_token_program
                .expect("token_b_token_program is not set"),

            system: self.instruction.system.expect("system is not set"),

            event_authority: self.instruction.event_authority,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CloseStrategyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    admin_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_position_or_base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_position_mint_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_position_token_account_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_tick_array_lower_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    old_tick_array_upper_or_base_vault_authority:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_a_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_b_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reward0_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reward1_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reward2_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    kamino_reward0_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    kamino_reward1_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    kamino_reward2_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_reward0_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_reward1_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_reward2_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_kamino_reward0_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_kamino_reward1_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_kamino_reward2_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
