//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
pub struct SwapRewards {
      
              
          pub user: solana_program::pubkey::Pubkey,
          
              
          pub strategy: solana_program::pubkey::Pubkey,
          
              
          pub global_config: solana_program::pubkey::Pubkey,
          
              
          pub pool: solana_program::pubkey::Pubkey,
          
              
          pub token_a_vault: solana_program::pubkey::Pubkey,
          
              
          pub token_b_vault: solana_program::pubkey::Pubkey,
          
              
          pub reward_vault: solana_program::pubkey::Pubkey,
          
              
          pub base_vault_authority: solana_program::pubkey::Pubkey,
          
              
          pub treasury_fee_token_a_vault: solana_program::pubkey::Pubkey,
          
              
          pub treasury_fee_token_b_vault: solana_program::pubkey::Pubkey,
          
              
          pub treasury_fee_vault_authority: solana_program::pubkey::Pubkey,
          
              
          pub token_a_mint: solana_program::pubkey::Pubkey,
          
              
          pub token_b_mint: solana_program::pubkey::Pubkey,
          
              
          pub reward_mint: solana_program::pubkey::Pubkey,
          
              
          pub user_token_a_ata: solana_program::pubkey::Pubkey,
          
              
          pub user_token_b_ata: solana_program::pubkey::Pubkey,
          
              
          pub user_reward_token_account: solana_program::pubkey::Pubkey,
          
              
          pub scope_prices: solana_program::pubkey::Pubkey,
          
              
          pub token_infos: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub token_a_token_program: solana_program::pubkey::Pubkey,
          
              
          pub token_b_token_program: solana_program::pubkey::Pubkey,
          
              
          pub reward_token_program: solana_program::pubkey::Pubkey,
          
              
          pub instruction_sysvar_account: solana_program::pubkey::Pubkey,
      }

impl SwapRewards {
  pub fn instruction(&self, args: SwapRewardsInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: SwapRewardsInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(24+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.user,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reward_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.treasury_fee_token_a_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.treasury_fee_token_b_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.treasury_fee_vault_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reward_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_a_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_b_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_reward_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.scope_prices,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_infos,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reward_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = SwapRewardsInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::YVAULTS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SwapRewardsInstructionData {
            discriminator: [u8; 8],
                                    }

impl SwapRewardsInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [92, 41, 172, 30, 190, 65, 174, 90],
                                                                                        }
  }
}

impl Default for SwapRewardsInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SwapRewardsInstructionArgs {
                  pub token_a_in: u64,
                pub token_b_in: u64,
                pub reward_index: u64,
                pub reward_collateral_id: u64,
                pub min_collateral_token_out: u64,
      }


/// Instruction builder for `SwapRewards`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` strategy
          ///   2. `[]` global_config
          ///   3. `[]` pool
                ///   4. `[writable]` token_a_vault
                ///   5. `[writable]` token_b_vault
                ///   6. `[writable]` reward_vault
                ///   7. `[writable]` base_vault_authority
                ///   8. `[writable]` treasury_fee_token_a_vault
                ///   9. `[writable]` treasury_fee_token_b_vault
          ///   10. `[]` treasury_fee_vault_authority
          ///   11. `[]` token_a_mint
          ///   12. `[]` token_b_mint
          ///   13. `[]` reward_mint
                ///   14. `[writable]` user_token_a_ata
                ///   15. `[writable]` user_token_b_ata
                ///   16. `[writable]` user_reward_token_account
          ///   17. `[]` scope_prices
          ///   18. `[]` token_infos
                ///   19. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   20. `[]` token_a_token_program
          ///   21. `[]` token_b_token_program
          ///   22. `[]` reward_token_program
                ///   23. `[optional]` instruction_sysvar_account (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct SwapRewardsBuilder {
            user: Option<solana_program::pubkey::Pubkey>,
                strategy: Option<solana_program::pubkey::Pubkey>,
                global_config: Option<solana_program::pubkey::Pubkey>,
                pool: Option<solana_program::pubkey::Pubkey>,
                token_a_vault: Option<solana_program::pubkey::Pubkey>,
                token_b_vault: Option<solana_program::pubkey::Pubkey>,
                reward_vault: Option<solana_program::pubkey::Pubkey>,
                base_vault_authority: Option<solana_program::pubkey::Pubkey>,
                treasury_fee_token_a_vault: Option<solana_program::pubkey::Pubkey>,
                treasury_fee_token_b_vault: Option<solana_program::pubkey::Pubkey>,
                treasury_fee_vault_authority: Option<solana_program::pubkey::Pubkey>,
                token_a_mint: Option<solana_program::pubkey::Pubkey>,
                token_b_mint: Option<solana_program::pubkey::Pubkey>,
                reward_mint: Option<solana_program::pubkey::Pubkey>,
                user_token_a_ata: Option<solana_program::pubkey::Pubkey>,
                user_token_b_ata: Option<solana_program::pubkey::Pubkey>,
                user_reward_token_account: Option<solana_program::pubkey::Pubkey>,
                scope_prices: Option<solana_program::pubkey::Pubkey>,
                token_infos: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                token_a_token_program: Option<solana_program::pubkey::Pubkey>,
                token_b_token_program: Option<solana_program::pubkey::Pubkey>,
                reward_token_program: Option<solana_program::pubkey::Pubkey>,
                instruction_sysvar_account: Option<solana_program::pubkey::Pubkey>,
                        token_a_in: Option<u64>,
                token_b_in: Option<u64>,
                reward_index: Option<u64>,
                reward_collateral_id: Option<u64>,
                min_collateral_token_out: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SwapRewardsBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user = Some(user);
                    self
    }
            #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.strategy = Some(strategy);
                    self
    }
            #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.global_config = Some(global_config);
                    self
    }
            #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pool = Some(pool);
                    self
    }
            #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_a_vault = Some(token_a_vault);
                    self
    }
            #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_b_vault = Some(token_b_vault);
                    self
    }
            #[inline(always)]
    pub fn reward_vault(&mut self, reward_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reward_vault = Some(reward_vault);
                    self
    }
            #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_vault_authority = Some(base_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn treasury_fee_token_a_vault(&mut self, treasury_fee_token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.treasury_fee_token_a_vault = Some(treasury_fee_token_a_vault);
                    self
    }
            #[inline(always)]
    pub fn treasury_fee_token_b_vault(&mut self, treasury_fee_token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.treasury_fee_token_b_vault = Some(treasury_fee_token_b_vault);
                    self
    }
            #[inline(always)]
    pub fn treasury_fee_vault_authority(&mut self, treasury_fee_vault_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.treasury_fee_vault_authority = Some(treasury_fee_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_a_mint = Some(token_a_mint);
                    self
    }
            #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_b_mint = Some(token_b_mint);
                    self
    }
            #[inline(always)]
    pub fn reward_mint(&mut self, reward_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reward_mint = Some(reward_mint);
                    self
    }
            #[inline(always)]
    pub fn user_token_a_ata(&mut self, user_token_a_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_token_a_ata = Some(user_token_a_ata);
                    self
    }
            #[inline(always)]
    pub fn user_token_b_ata(&mut self, user_token_b_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_token_b_ata = Some(user_token_b_ata);
                    self
    }
            #[inline(always)]
    pub fn user_reward_token_account(&mut self, user_reward_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_reward_token_account = Some(user_reward_token_account);
                    self
    }
            #[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.scope_prices = Some(scope_prices);
                    self
    }
            #[inline(always)]
    pub fn token_infos(&mut self, token_infos: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_infos = Some(token_infos);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn token_a_token_program(&mut self, token_a_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_a_token_program = Some(token_a_token_program);
                    self
    }
            #[inline(always)]
    pub fn token_b_token_program(&mut self, token_b_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_b_token_program = Some(token_b_token_program);
                    self
    }
            #[inline(always)]
    pub fn reward_token_program(&mut self, reward_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reward_token_program = Some(reward_token_program);
                    self
    }
            /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
#[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn token_a_in(&mut self, token_a_in: u64) -> &mut Self {
        self.token_a_in = Some(token_a_in);
        self
      }
                #[inline(always)]
      pub fn token_b_in(&mut self, token_b_in: u64) -> &mut Self {
        self.token_b_in = Some(token_b_in);
        self
      }
                #[inline(always)]
      pub fn reward_index(&mut self, reward_index: u64) -> &mut Self {
        self.reward_index = Some(reward_index);
        self
      }
                #[inline(always)]
      pub fn reward_collateral_id(&mut self, reward_collateral_id: u64) -> &mut Self {
        self.reward_collateral_id = Some(reward_collateral_id);
        self
      }
                #[inline(always)]
      pub fn min_collateral_token_out(&mut self, min_collateral_token_out: u64) -> &mut Self {
        self.min_collateral_token_out = Some(min_collateral_token_out);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = SwapRewards {
                              user: self.user.expect("user is not set"),
                                        strategy: self.strategy.expect("strategy is not set"),
                                        global_config: self.global_config.expect("global_config is not set"),
                                        pool: self.pool.expect("pool is not set"),
                                        token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
                                        token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
                                        reward_vault: self.reward_vault.expect("reward_vault is not set"),
                                        base_vault_authority: self.base_vault_authority.expect("base_vault_authority is not set"),
                                        treasury_fee_token_a_vault: self.treasury_fee_token_a_vault.expect("treasury_fee_token_a_vault is not set"),
                                        treasury_fee_token_b_vault: self.treasury_fee_token_b_vault.expect("treasury_fee_token_b_vault is not set"),
                                        treasury_fee_vault_authority: self.treasury_fee_vault_authority.expect("treasury_fee_vault_authority is not set"),
                                        token_a_mint: self.token_a_mint.expect("token_a_mint is not set"),
                                        token_b_mint: self.token_b_mint.expect("token_b_mint is not set"),
                                        reward_mint: self.reward_mint.expect("reward_mint is not set"),
                                        user_token_a_ata: self.user_token_a_ata.expect("user_token_a_ata is not set"),
                                        user_token_b_ata: self.user_token_b_ata.expect("user_token_b_ata is not set"),
                                        user_reward_token_account: self.user_reward_token_account.expect("user_reward_token_account is not set"),
                                        scope_prices: self.scope_prices.expect("scope_prices is not set"),
                                        token_infos: self.token_infos.expect("token_infos is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        token_a_token_program: self.token_a_token_program.expect("token_a_token_program is not set"),
                                        token_b_token_program: self.token_b_token_program.expect("token_b_token_program is not set"),
                                        reward_token_program: self.reward_token_program.expect("reward_token_program is not set"),
                                        instruction_sysvar_account: self.instruction_sysvar_account.unwrap_or(solana_program::pubkey!("Sysvar1nstructions1111111111111111111111111")),
                      };
          let args = SwapRewardsInstructionArgs {
                                                              token_a_in: self.token_a_in.clone().expect("token_a_in is not set"),
                                                                  token_b_in: self.token_b_in.clone().expect("token_b_in is not set"),
                                                                  reward_index: self.reward_index.clone().expect("reward_index is not set"),
                                                                  reward_collateral_id: self.reward_collateral_id.clone().expect("reward_collateral_id is not set"),
                                                                  min_collateral_token_out: self.min_collateral_token_out.clone().expect("min_collateral_token_out is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `swap_rewards` CPI accounts.
  pub struct SwapRewardsCpiAccounts<'a, 'b> {
          
                    
              pub user: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reward_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub treasury_fee_token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub treasury_fee_token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub treasury_fee_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reward_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_reward_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reward_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `swap_rewards` CPI instruction.
pub struct SwapRewardsCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub user: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reward_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub treasury_fee_token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub treasury_fee_token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub treasury_fee_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reward_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_reward_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reward_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: SwapRewardsInstructionArgs,
  }

impl<'a, 'b> SwapRewardsCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: SwapRewardsCpiAccounts<'a, 'b>,
              args: SwapRewardsInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              user: accounts.user,
              strategy: accounts.strategy,
              global_config: accounts.global_config,
              pool: accounts.pool,
              token_a_vault: accounts.token_a_vault,
              token_b_vault: accounts.token_b_vault,
              reward_vault: accounts.reward_vault,
              base_vault_authority: accounts.base_vault_authority,
              treasury_fee_token_a_vault: accounts.treasury_fee_token_a_vault,
              treasury_fee_token_b_vault: accounts.treasury_fee_token_b_vault,
              treasury_fee_vault_authority: accounts.treasury_fee_vault_authority,
              token_a_mint: accounts.token_a_mint,
              token_b_mint: accounts.token_b_mint,
              reward_mint: accounts.reward_mint,
              user_token_a_ata: accounts.user_token_a_ata,
              user_token_b_ata: accounts.user_token_b_ata,
              user_reward_token_account: accounts.user_reward_token_account,
              scope_prices: accounts.scope_prices,
              token_infos: accounts.token_infos,
              system_program: accounts.system_program,
              token_a_token_program: accounts.token_a_token_program,
              token_b_token_program: accounts.token_b_token_program,
              reward_token_program: accounts.reward_token_program,
              instruction_sysvar_account: accounts.instruction_sysvar_account,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(24+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reward_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.treasury_fee_token_a_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.treasury_fee_token_b_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.treasury_fee_vault_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reward_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_a_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_b_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_reward_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.scope_prices.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_infos.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reward_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = SwapRewardsInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::YVAULTS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(25 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.user.clone());
                        account_infos.push(self.strategy.clone());
                        account_infos.push(self.global_config.clone());
                        account_infos.push(self.pool.clone());
                        account_infos.push(self.token_a_vault.clone());
                        account_infos.push(self.token_b_vault.clone());
                        account_infos.push(self.reward_vault.clone());
                        account_infos.push(self.base_vault_authority.clone());
                        account_infos.push(self.treasury_fee_token_a_vault.clone());
                        account_infos.push(self.treasury_fee_token_b_vault.clone());
                        account_infos.push(self.treasury_fee_vault_authority.clone());
                        account_infos.push(self.token_a_mint.clone());
                        account_infos.push(self.token_b_mint.clone());
                        account_infos.push(self.reward_mint.clone());
                        account_infos.push(self.user_token_a_ata.clone());
                        account_infos.push(self.user_token_b_ata.clone());
                        account_infos.push(self.user_reward_token_account.clone());
                        account_infos.push(self.scope_prices.clone());
                        account_infos.push(self.token_infos.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_a_token_program.clone());
                        account_infos.push(self.token_b_token_program.clone());
                        account_infos.push(self.reward_token_program.clone());
                        account_infos.push(self.instruction_sysvar_account.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `SwapRewards` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` strategy
          ///   2. `[]` global_config
          ///   3. `[]` pool
                ///   4. `[writable]` token_a_vault
                ///   5. `[writable]` token_b_vault
                ///   6. `[writable]` reward_vault
                ///   7. `[writable]` base_vault_authority
                ///   8. `[writable]` treasury_fee_token_a_vault
                ///   9. `[writable]` treasury_fee_token_b_vault
          ///   10. `[]` treasury_fee_vault_authority
          ///   11. `[]` token_a_mint
          ///   12. `[]` token_b_mint
          ///   13. `[]` reward_mint
                ///   14. `[writable]` user_token_a_ata
                ///   15. `[writable]` user_token_b_ata
                ///   16. `[writable]` user_reward_token_account
          ///   17. `[]` scope_prices
          ///   18. `[]` token_infos
          ///   19. `[]` system_program
          ///   20. `[]` token_a_token_program
          ///   21. `[]` token_b_token_program
          ///   22. `[]` reward_token_program
          ///   23. `[]` instruction_sysvar_account
#[derive(Clone, Debug)]
pub struct SwapRewardsCpiBuilder<'a, 'b> {
  instruction: Box<SwapRewardsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SwapRewardsCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(SwapRewardsCpiBuilderInstruction {
      __program: program,
              user: None,
              strategy: None,
              global_config: None,
              pool: None,
              token_a_vault: None,
              token_b_vault: None,
              reward_vault: None,
              base_vault_authority: None,
              treasury_fee_token_a_vault: None,
              treasury_fee_token_b_vault: None,
              treasury_fee_vault_authority: None,
              token_a_mint: None,
              token_b_mint: None,
              reward_mint: None,
              user_token_a_ata: None,
              user_token_b_ata: None,
              user_reward_token_account: None,
              scope_prices: None,
              token_infos: None,
              system_program: None,
              token_a_token_program: None,
              token_b_token_program: None,
              reward_token_program: None,
              instruction_sysvar_account: None,
                                            token_a_in: None,
                                token_b_in: None,
                                reward_index: None,
                                reward_collateral_id: None,
                                min_collateral_token_out: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user = Some(user);
                    self
    }
      #[inline(always)]
    pub fn strategy(&mut self, strategy: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.strategy = Some(strategy);
                    self
    }
      #[inline(always)]
    pub fn global_config(&mut self, global_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_config = Some(global_config);
                    self
    }
      #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pool = Some(pool);
                    self
    }
      #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_a_vault = Some(token_a_vault);
                    self
    }
      #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_b_vault = Some(token_b_vault);
                    self
    }
      #[inline(always)]
    pub fn reward_vault(&mut self, reward_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reward_vault = Some(reward_vault);
                    self
    }
      #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_vault_authority = Some(base_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn treasury_fee_token_a_vault(&mut self, treasury_fee_token_a_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.treasury_fee_token_a_vault = Some(treasury_fee_token_a_vault);
                    self
    }
      #[inline(always)]
    pub fn treasury_fee_token_b_vault(&mut self, treasury_fee_token_b_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.treasury_fee_token_b_vault = Some(treasury_fee_token_b_vault);
                    self
    }
      #[inline(always)]
    pub fn treasury_fee_vault_authority(&mut self, treasury_fee_vault_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.treasury_fee_vault_authority = Some(treasury_fee_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_a_mint = Some(token_a_mint);
                    self
    }
      #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_b_mint = Some(token_b_mint);
                    self
    }
      #[inline(always)]
    pub fn reward_mint(&mut self, reward_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reward_mint = Some(reward_mint);
                    self
    }
      #[inline(always)]
    pub fn user_token_a_ata(&mut self, user_token_a_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_token_a_ata = Some(user_token_a_ata);
                    self
    }
      #[inline(always)]
    pub fn user_token_b_ata(&mut self, user_token_b_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_token_b_ata = Some(user_token_b_ata);
                    self
    }
      #[inline(always)]
    pub fn user_reward_token_account(&mut self, user_reward_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_reward_token_account = Some(user_reward_token_account);
                    self
    }
      #[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.scope_prices = Some(scope_prices);
                    self
    }
      #[inline(always)]
    pub fn token_infos(&mut self, token_infos: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_infos = Some(token_infos);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_a_token_program(&mut self, token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_a_token_program = Some(token_a_token_program);
                    self
    }
      #[inline(always)]
    pub fn token_b_token_program(&mut self, token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_b_token_program = Some(token_b_token_program);
                    self
    }
      #[inline(always)]
    pub fn reward_token_program(&mut self, reward_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reward_token_program = Some(reward_token_program);
                    self
    }
      #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn token_a_in(&mut self, token_a_in: u64) -> &mut Self {
        self.instruction.token_a_in = Some(token_a_in);
        self
      }
                #[inline(always)]
      pub fn token_b_in(&mut self, token_b_in: u64) -> &mut Self {
        self.instruction.token_b_in = Some(token_b_in);
        self
      }
                #[inline(always)]
      pub fn reward_index(&mut self, reward_index: u64) -> &mut Self {
        self.instruction.reward_index = Some(reward_index);
        self
      }
                #[inline(always)]
      pub fn reward_collateral_id(&mut self, reward_collateral_id: u64) -> &mut Self {
        self.instruction.reward_collateral_id = Some(reward_collateral_id);
        self
      }
                #[inline(always)]
      pub fn min_collateral_token_out(&mut self, min_collateral_token_out: u64) -> &mut Self {
        self.instruction.min_collateral_token_out = Some(min_collateral_token_out);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = SwapRewardsInstructionArgs {
                                                              token_a_in: self.instruction.token_a_in.clone().expect("token_a_in is not set"),
                                                                  token_b_in: self.instruction.token_b_in.clone().expect("token_b_in is not set"),
                                                                  reward_index: self.instruction.reward_index.clone().expect("reward_index is not set"),
                                                                  reward_collateral_id: self.instruction.reward_collateral_id.clone().expect("reward_collateral_id is not set"),
                                                                  min_collateral_token_out: self.instruction.min_collateral_token_out.clone().expect("min_collateral_token_out is not set"),
                                    };
        let instruction = SwapRewardsCpi {
        __program: self.instruction.__program,
                  
          user: self.instruction.user.expect("user is not set"),
                  
          strategy: self.instruction.strategy.expect("strategy is not set"),
                  
          global_config: self.instruction.global_config.expect("global_config is not set"),
                  
          pool: self.instruction.pool.expect("pool is not set"),
                  
          token_a_vault: self.instruction.token_a_vault.expect("token_a_vault is not set"),
                  
          token_b_vault: self.instruction.token_b_vault.expect("token_b_vault is not set"),
                  
          reward_vault: self.instruction.reward_vault.expect("reward_vault is not set"),
                  
          base_vault_authority: self.instruction.base_vault_authority.expect("base_vault_authority is not set"),
                  
          treasury_fee_token_a_vault: self.instruction.treasury_fee_token_a_vault.expect("treasury_fee_token_a_vault is not set"),
                  
          treasury_fee_token_b_vault: self.instruction.treasury_fee_token_b_vault.expect("treasury_fee_token_b_vault is not set"),
                  
          treasury_fee_vault_authority: self.instruction.treasury_fee_vault_authority.expect("treasury_fee_vault_authority is not set"),
                  
          token_a_mint: self.instruction.token_a_mint.expect("token_a_mint is not set"),
                  
          token_b_mint: self.instruction.token_b_mint.expect("token_b_mint is not set"),
                  
          reward_mint: self.instruction.reward_mint.expect("reward_mint is not set"),
                  
          user_token_a_ata: self.instruction.user_token_a_ata.expect("user_token_a_ata is not set"),
                  
          user_token_b_ata: self.instruction.user_token_b_ata.expect("user_token_b_ata is not set"),
                  
          user_reward_token_account: self.instruction.user_reward_token_account.expect("user_reward_token_account is not set"),
                  
          scope_prices: self.instruction.scope_prices.expect("scope_prices is not set"),
                  
          token_infos: self.instruction.token_infos.expect("token_infos is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_a_token_program: self.instruction.token_a_token_program.expect("token_a_token_program is not set"),
                  
          token_b_token_program: self.instruction.token_b_token_program.expect("token_b_token_program is not set"),
                  
          reward_token_program: self.instruction.reward_token_program.expect("reward_token_program is not set"),
                  
          instruction_sysvar_account: self.instruction.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct SwapRewardsCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reward_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                treasury_fee_token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                treasury_fee_token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                treasury_fee_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_a_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_b_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reward_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_token_a_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_token_b_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_reward_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                scope_prices: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_infos: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_a_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_b_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reward_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                instruction_sysvar_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        token_a_in: Option<u64>,
                token_b_in: Option<u64>,
                reward_index: Option<u64>,
                reward_collateral_id: Option<u64>,
                min_collateral_token_out: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

