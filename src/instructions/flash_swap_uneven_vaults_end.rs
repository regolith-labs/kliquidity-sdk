//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct FlashSwapUnevenVaultsEnd {
    pub swapper: solana_program::pubkey::Pubkey,

    pub strategy: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,

    pub token_a_vault: solana_program::pubkey::Pubkey,

    pub token_b_vault: solana_program::pubkey::Pubkey,

    pub token_a_ata: solana_program::pubkey::Pubkey,

    pub token_b_ata: solana_program::pubkey::Pubkey,

    pub base_vault_authority: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub position: solana_program::pubkey::Pubkey,

    pub scope_prices: solana_program::pubkey::Pubkey,

    pub token_infos: solana_program::pubkey::Pubkey,

    pub tick_array_lower: solana_program::pubkey::Pubkey,

    pub tick_array_upper: solana_program::pubkey::Pubkey,

    pub token_a_mint: solana_program::pubkey::Pubkey,

    pub token_b_mint: solana_program::pubkey::Pubkey,

    pub token_a_token_program: solana_program::pubkey::Pubkey,

    pub token_b_token_program: solana_program::pubkey::Pubkey,

    pub instruction_sysvar_account: solana_program::pubkey::Pubkey,

    pub consensus_account: solana_program::pubkey::Pubkey,
}

impl FlashSwapUnevenVaultsEnd {
    pub fn instruction(
        &self,
        args: FlashSwapUnevenVaultsEndInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: FlashSwapUnevenVaultsEndInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swapper,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.scope_prices,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_infos,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tick_array_lower,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tick_array_upper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.consensus_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = FlashSwapUnevenVaultsEndInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::YVAULTS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FlashSwapUnevenVaultsEndInstructionData {
    discriminator: [u8; 8],
}

impl FlashSwapUnevenVaultsEndInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [226, 2, 190, 101, 202, 132, 156, 20],
        }
    }
}

impl Default for FlashSwapUnevenVaultsEndInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FlashSwapUnevenVaultsEndInstructionArgs {
    pub min_repay_amount: u64,
    pub amount_to_leave_to_user: u64,
    pub a_to_b: bool,
}

/// Instruction builder for `FlashSwapUnevenVaultsEnd`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` swapper
///   1. `[writable]` strategy
///   2. `[]` global_config
///   3. `[writable]` token_a_vault
///   4. `[writable]` token_b_vault
///   5. `[writable]` token_a_ata
///   6. `[writable]` token_b_ata
///   7. `[writable]` base_vault_authority
///   8. `[writable]` pool
///   9. `[writable]` position
///   10. `[]` scope_prices
///   11. `[]` token_infos
///   12. `[]` tick_array_lower
///   13. `[]` tick_array_upper
///   14. `[]` token_a_mint
///   15. `[]` token_b_mint
///   16. `[]` token_a_token_program
///   17. `[]` token_b_token_program
///   18. `[optional]` instruction_sysvar_account (default to `Sysvar1nstructions1111111111111111111111111`)
///   19. `[]` consensus_account
#[derive(Clone, Debug, Default)]
pub struct FlashSwapUnevenVaultsEndBuilder {
    swapper: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    token_a_vault: Option<solana_program::pubkey::Pubkey>,
    token_b_vault: Option<solana_program::pubkey::Pubkey>,
    token_a_ata: Option<solana_program::pubkey::Pubkey>,
    token_b_ata: Option<solana_program::pubkey::Pubkey>,
    base_vault_authority: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    position: Option<solana_program::pubkey::Pubkey>,
    scope_prices: Option<solana_program::pubkey::Pubkey>,
    token_infos: Option<solana_program::pubkey::Pubkey>,
    tick_array_lower: Option<solana_program::pubkey::Pubkey>,
    tick_array_upper: Option<solana_program::pubkey::Pubkey>,
    token_a_mint: Option<solana_program::pubkey::Pubkey>,
    token_b_mint: Option<solana_program::pubkey::Pubkey>,
    token_a_token_program: Option<solana_program::pubkey::Pubkey>,
    token_b_token_program: Option<solana_program::pubkey::Pubkey>,
    instruction_sysvar_account: Option<solana_program::pubkey::Pubkey>,
    consensus_account: Option<solana_program::pubkey::Pubkey>,
    min_repay_amount: Option<u64>,
    amount_to_leave_to_user: Option<u64>,
    a_to_b: Option<bool>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl FlashSwapUnevenVaultsEndBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swapper(&mut self, swapper: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swapper = Some(swapper);
        self
    }
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn token_a_ata(&mut self, token_a_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_ata = Some(token_a_ata);
        self
    }
    #[inline(always)]
    pub fn token_b_ata(&mut self, token_b_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_ata = Some(token_b_ata);
        self
    }
    #[inline(always)]
    pub fn base_vault_authority(
        &mut self,
        base_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_vault_authority = Some(base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn position(&mut self, position: solana_program::pubkey::Pubkey) -> &mut Self {
        self.position = Some(position);
        self
    }
    #[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: solana_program::pubkey::Pubkey) -> &mut Self {
        self.scope_prices = Some(scope_prices);
        self
    }
    #[inline(always)]
    pub fn token_infos(&mut self, token_infos: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_infos = Some(token_infos);
        self
    }
    #[inline(always)]
    pub fn tick_array_lower(
        &mut self,
        tick_array_lower: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tick_array_lower = Some(tick_array_lower);
        self
    }
    #[inline(always)]
    pub fn tick_array_upper(
        &mut self,
        tick_array_upper: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tick_array_upper = Some(tick_array_upper);
        self
    }
    #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_mint = Some(token_a_mint);
        self
    }
    #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_mint = Some(token_b_mint);
        self
    }
    #[inline(always)]
    pub fn token_a_token_program(
        &mut self,
        token_a_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_a_token_program = Some(token_a_token_program);
        self
    }
    #[inline(always)]
    pub fn token_b_token_program(
        &mut self,
        token_b_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_b_token_program = Some(token_b_token_program);
        self
    }
    /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
    #[inline(always)]
    pub fn instruction_sysvar_account(
        &mut self,
        instruction_sysvar_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.instruction_sysvar_account = Some(instruction_sysvar_account);
        self
    }
    #[inline(always)]
    pub fn consensus_account(
        &mut self,
        consensus_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.consensus_account = Some(consensus_account);
        self
    }
    #[inline(always)]
    pub fn min_repay_amount(&mut self, min_repay_amount: u64) -> &mut Self {
        self.min_repay_amount = Some(min_repay_amount);
        self
    }
    #[inline(always)]
    pub fn amount_to_leave_to_user(&mut self, amount_to_leave_to_user: u64) -> &mut Self {
        self.amount_to_leave_to_user = Some(amount_to_leave_to_user);
        self
    }
    #[inline(always)]
    pub fn a_to_b(&mut self, a_to_b: bool) -> &mut Self {
        self.a_to_b = Some(a_to_b);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = FlashSwapUnevenVaultsEnd {
            swapper: self.swapper.expect("swapper is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
            token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
            token_a_ata: self.token_a_ata.expect("token_a_ata is not set"),
            token_b_ata: self.token_b_ata.expect("token_b_ata is not set"),
            base_vault_authority: self
                .base_vault_authority
                .expect("base_vault_authority is not set"),
            pool: self.pool.expect("pool is not set"),
            position: self.position.expect("position is not set"),
            scope_prices: self.scope_prices.expect("scope_prices is not set"),
            token_infos: self.token_infos.expect("token_infos is not set"),
            tick_array_lower: self.tick_array_lower.expect("tick_array_lower is not set"),
            tick_array_upper: self.tick_array_upper.expect("tick_array_upper is not set"),
            token_a_mint: self.token_a_mint.expect("token_a_mint is not set"),
            token_b_mint: self.token_b_mint.expect("token_b_mint is not set"),
            token_a_token_program: self
                .token_a_token_program
                .expect("token_a_token_program is not set"),
            token_b_token_program: self
                .token_b_token_program
                .expect("token_b_token_program is not set"),
            instruction_sysvar_account: self.instruction_sysvar_account.unwrap_or(
                solana_program::pubkey!("Sysvar1nstructions1111111111111111111111111"),
            ),
            consensus_account: self
                .consensus_account
                .expect("consensus_account is not set"),
        };
        let args = FlashSwapUnevenVaultsEndInstructionArgs {
            min_repay_amount: self
                .min_repay_amount
                .clone()
                .expect("min_repay_amount is not set"),
            amount_to_leave_to_user: self
                .amount_to_leave_to_user
                .clone()
                .expect("amount_to_leave_to_user is not set"),
            a_to_b: self.a_to_b.clone().expect("a_to_b is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `flash_swap_uneven_vaults_end` CPI accounts.
pub struct FlashSwapUnevenVaultsEndCpiAccounts<'a, 'b> {
    pub swapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub position: &'b solana_program::account_info::AccountInfo<'a>,

    pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub consensus_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `flash_swap_uneven_vaults_end` CPI instruction.
pub struct FlashSwapUnevenVaultsEndCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub position: &'b solana_program::account_info::AccountInfo<'a>,

    pub scope_prices: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_infos: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub consensus_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: FlashSwapUnevenVaultsEndInstructionArgs,
}

impl<'a, 'b> FlashSwapUnevenVaultsEndCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: FlashSwapUnevenVaultsEndCpiAccounts<'a, 'b>,
        args: FlashSwapUnevenVaultsEndInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            swapper: accounts.swapper,
            strategy: accounts.strategy,
            global_config: accounts.global_config,
            token_a_vault: accounts.token_a_vault,
            token_b_vault: accounts.token_b_vault,
            token_a_ata: accounts.token_a_ata,
            token_b_ata: accounts.token_b_ata,
            base_vault_authority: accounts.base_vault_authority,
            pool: accounts.pool,
            position: accounts.position,
            scope_prices: accounts.scope_prices,
            token_infos: accounts.token_infos,
            tick_array_lower: accounts.tick_array_lower,
            tick_array_upper: accounts.tick_array_upper,
            token_a_mint: accounts.token_a_mint,
            token_b_mint: accounts.token_b_mint,
            token_a_token_program: accounts.token_a_token_program,
            token_b_token_program: accounts.token_b_token_program,
            instruction_sysvar_account: accounts.instruction_sysvar_account,
            consensus_account: accounts.consensus_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swapper.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.scope_prices.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_infos.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tick_array_lower.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tick_array_upper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.consensus_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = FlashSwapUnevenVaultsEndInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::YVAULTS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(21 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swapper.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.token_a_vault.clone());
        account_infos.push(self.token_b_vault.clone());
        account_infos.push(self.token_a_ata.clone());
        account_infos.push(self.token_b_ata.clone());
        account_infos.push(self.base_vault_authority.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.position.clone());
        account_infos.push(self.scope_prices.clone());
        account_infos.push(self.token_infos.clone());
        account_infos.push(self.tick_array_lower.clone());
        account_infos.push(self.tick_array_upper.clone());
        account_infos.push(self.token_a_mint.clone());
        account_infos.push(self.token_b_mint.clone());
        account_infos.push(self.token_a_token_program.clone());
        account_infos.push(self.token_b_token_program.clone());
        account_infos.push(self.instruction_sysvar_account.clone());
        account_infos.push(self.consensus_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `FlashSwapUnevenVaultsEnd` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` swapper
///   1. `[writable]` strategy
///   2. `[]` global_config
///   3. `[writable]` token_a_vault
///   4. `[writable]` token_b_vault
///   5. `[writable]` token_a_ata
///   6. `[writable]` token_b_ata
///   7. `[writable]` base_vault_authority
///   8. `[writable]` pool
///   9. `[writable]` position
///   10. `[]` scope_prices
///   11. `[]` token_infos
///   12. `[]` tick_array_lower
///   13. `[]` tick_array_upper
///   14. `[]` token_a_mint
///   15. `[]` token_b_mint
///   16. `[]` token_a_token_program
///   17. `[]` token_b_token_program
///   18. `[]` instruction_sysvar_account
///   19. `[]` consensus_account
#[derive(Clone, Debug)]
pub struct FlashSwapUnevenVaultsEndCpiBuilder<'a, 'b> {
    instruction: Box<FlashSwapUnevenVaultsEndCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> FlashSwapUnevenVaultsEndCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(FlashSwapUnevenVaultsEndCpiBuilderInstruction {
            __program: program,
            swapper: None,
            strategy: None,
            global_config: None,
            token_a_vault: None,
            token_b_vault: None,
            token_a_ata: None,
            token_b_ata: None,
            base_vault_authority: None,
            pool: None,
            position: None,
            scope_prices: None,
            token_infos: None,
            tick_array_lower: None,
            tick_array_upper: None,
            token_a_mint: None,
            token_b_mint: None,
            token_a_token_program: None,
            token_b_token_program: None,
            instruction_sysvar_account: None,
            consensus_account: None,
            min_repay_amount: None,
            amount_to_leave_to_user: None,
            a_to_b: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swapper(
        &mut self,
        swapper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swapper = Some(swapper);
        self
    }
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(
        &mut self,
        token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(
        &mut self,
        token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn token_a_ata(
        &mut self,
        token_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_ata = Some(token_a_ata);
        self
    }
    #[inline(always)]
    pub fn token_b_ata(
        &mut self,
        token_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_ata = Some(token_b_ata);
        self
    }
    #[inline(always)]
    pub fn base_vault_authority(
        &mut self,
        base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault_authority = Some(base_vault_authority);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn position(
        &mut self,
        position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position = Some(position);
        self
    }
    #[inline(always)]
    pub fn scope_prices(
        &mut self,
        scope_prices: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.scope_prices = Some(scope_prices);
        self
    }
    #[inline(always)]
    pub fn token_infos(
        &mut self,
        token_infos: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_infos = Some(token_infos);
        self
    }
    #[inline(always)]
    pub fn tick_array_lower(
        &mut self,
        tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_lower = Some(tick_array_lower);
        self
    }
    #[inline(always)]
    pub fn tick_array_upper(
        &mut self,
        tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_upper = Some(tick_array_upper);
        self
    }
    #[inline(always)]
    pub fn token_a_mint(
        &mut self,
        token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_mint = Some(token_a_mint);
        self
    }
    #[inline(always)]
    pub fn token_b_mint(
        &mut self,
        token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_mint = Some(token_b_mint);
        self
    }
    #[inline(always)]
    pub fn token_a_token_program(
        &mut self,
        token_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_token_program = Some(token_a_token_program);
        self
    }
    #[inline(always)]
    pub fn token_b_token_program(
        &mut self,
        token_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_token_program = Some(token_b_token_program);
        self
    }
    #[inline(always)]
    pub fn instruction_sysvar_account(
        &mut self,
        instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
        self
    }
    #[inline(always)]
    pub fn consensus_account(
        &mut self,
        consensus_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.consensus_account = Some(consensus_account);
        self
    }
    #[inline(always)]
    pub fn min_repay_amount(&mut self, min_repay_amount: u64) -> &mut Self {
        self.instruction.min_repay_amount = Some(min_repay_amount);
        self
    }
    #[inline(always)]
    pub fn amount_to_leave_to_user(&mut self, amount_to_leave_to_user: u64) -> &mut Self {
        self.instruction.amount_to_leave_to_user = Some(amount_to_leave_to_user);
        self
    }
    #[inline(always)]
    pub fn a_to_b(&mut self, a_to_b: bool) -> &mut Self {
        self.instruction.a_to_b = Some(a_to_b);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = FlashSwapUnevenVaultsEndInstructionArgs {
            min_repay_amount: self
                .instruction
                .min_repay_amount
                .clone()
                .expect("min_repay_amount is not set"),
            amount_to_leave_to_user: self
                .instruction
                .amount_to_leave_to_user
                .clone()
                .expect("amount_to_leave_to_user is not set"),
            a_to_b: self.instruction.a_to_b.clone().expect("a_to_b is not set"),
        };
        let instruction = FlashSwapUnevenVaultsEndCpi {
            __program: self.instruction.__program,

            swapper: self.instruction.swapper.expect("swapper is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            token_a_vault: self
                .instruction
                .token_a_vault
                .expect("token_a_vault is not set"),

            token_b_vault: self
                .instruction
                .token_b_vault
                .expect("token_b_vault is not set"),

            token_a_ata: self
                .instruction
                .token_a_ata
                .expect("token_a_ata is not set"),

            token_b_ata: self
                .instruction
                .token_b_ata
                .expect("token_b_ata is not set"),

            base_vault_authority: self
                .instruction
                .base_vault_authority
                .expect("base_vault_authority is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            position: self.instruction.position.expect("position is not set"),

            scope_prices: self
                .instruction
                .scope_prices
                .expect("scope_prices is not set"),

            token_infos: self
                .instruction
                .token_infos
                .expect("token_infos is not set"),

            tick_array_lower: self
                .instruction
                .tick_array_lower
                .expect("tick_array_lower is not set"),

            tick_array_upper: self
                .instruction
                .tick_array_upper
                .expect("tick_array_upper is not set"),

            token_a_mint: self
                .instruction
                .token_a_mint
                .expect("token_a_mint is not set"),

            token_b_mint: self
                .instruction
                .token_b_mint
                .expect("token_b_mint is not set"),

            token_a_token_program: self
                .instruction
                .token_a_token_program
                .expect("token_a_token_program is not set"),

            token_b_token_program: self
                .instruction
                .token_b_token_program
                .expect("token_b_token_program is not set"),

            instruction_sysvar_account: self
                .instruction
                .instruction_sysvar_account
                .expect("instruction_sysvar_account is not set"),

            consensus_account: self
                .instruction
                .consensus_account
                .expect("consensus_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct FlashSwapUnevenVaultsEndCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    scope_prices: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_infos: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_array_lower: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_array_upper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    instruction_sysvar_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    consensus_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    min_repay_amount: Option<u64>,
    amount_to_leave_to_user: Option<u64>,
    a_to_b: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
